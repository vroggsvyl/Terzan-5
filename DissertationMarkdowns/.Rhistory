coord_fixed()
RAWPOI2<- ggplot(POI2, aes(x,y)) +
geom_point(size = 0.5) +
coord_fixed()
RAWPOI1
RAWPOI2
library(here)
library(ggplot2)
library(plotly)
library(readr)
library(ggpointdensity)
library(viridis)
library(tidyr)
library(fitdistrplus)
library(goftest)
library(DescTools)
## Color palette
cbPalette <- c("#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# import data from csv file
Terzan5 <- readr::read_csv(here("Data", "Terzan 5 X-ray events.csv"), col_types = list(.default = readr::col_guess()), )
head(Terzan5)
# import data from ODS file
# library(readODS)
# Terzan5 <- read_ods(here("Raw Data.ods"), col_types = list(.default = readr::col_guess()), )
#removing extraneous columns
T5 <- data.frame(Terzan5$x, Terzan5$y)
colnames(T5) <- c('x','y')
POI1 <- T5 %>%
filter(x>4160 & x<4180 & y>4180 & y<4200)
POI2 <- T5 %>%
filter(x>4105 & x< 4125 & y>4040 & y<4060)
line0 <- POI2 %>%
filter(y>4048.5 & y< 4049.5)
line1 <- POI2 %>%
filter(y>4049.5 & y< 4050.5)
#The Example in the dissertation follows line2
line2 <- POI2 %>%
filter(y>4050.5 & y< 4051.5)
line3 <- POI2 %>%
filter(y>4051.5 & y< 4052.5)
line4 <- POI2 %>%
filter(y>4052.5 & y< 4053.5)
line5 <- POI2 %>%
filter(y>4053.5 & y< 4054.5)
line6 <- POI2 %>%
filter(y>4054.5 & y< 4055.5)
lineback <- POI2 %>%
filter(y>4055 & y< 4060)
xVal <- seq(4105, 4125, length = 500)
modelPOI2 +
geom_hline(yintercept = 4049.5) +
geom_hline(yintercept = 4050.5, colour = "red") +
geom_hline(yintercept = 4051.5, colour = "red") +
geom_hline(yintercept = 4052.5) +
geom_hline(yintercept = 4053.5) +
geom_hline(yintercept = 4054.5)
RAWPOI2 +
geom_hline(yintercept = 4049.5) +
geom_hline(yintercept = 4050.5, colour = "red") +
geom_hline(yintercept = 4051.5, colour = "red") +
geom_hline(yintercept = 4052.5) +
geom_hline(yintercept = 4053.5) +
geom_hline(yintercept = 4054.5)
histLine2 <- ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5])
histLine2
#gather all x values from line2
xl2 <- line2$x
# Define the Gaussian density function
gaussian_density <- function(parameters, x) {
mean <- parameters[[1]]
sd <- parameters[[2]]
return(dnorm(x, mean = mean, sd = sd))
}
# Define the negative log-likelihood function for Gaussian distribution
negative_log_likelihood <- function(parameters, x) {
predicted_density <- gaussian_density(parameters, x)
return(-sum(log(predicted_density)))
}
#Define initial parameters, close estimates
initial_guess <- c(mean = 4115, sd = 1)
# Optimize the negative log-likelihood function
result <- optim(par = initial_guess, fn = negative_log_likelihood, x = xl2, method = "Nelder-Mead")
#check for convergence
result
# Extract the optimized parameters
optimized_parameters <- result$par
optimized_parameters
optimParameters2N <- gaussian_density(optimized_parameters, xl2)
histWithNormL2 <- histLine2 +
stat_function(fun = gaussian_density, args = list(parameters = optimized_parameters), n=1000, aes(colour="gaussian distribution"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("right"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
histWithNormL2
ks.test(x = line2$x, y = "pnorm")
noTiesL2 <- unique(xl2)
sortNTL2 <- sort(noTiesL2)
ks.test(x = sortNTL2, y = "pnorm")
plot(ecdf(noTiesL2), main = "KS Test - Normal Distribution", ylab = "Probability")
curve(pnorm(x, mean = 4115.19535, sd = 1.20138), add = TRUE, col = 4)
probs <- seq(0.01, 0.99, by = 0.01)
quant <- qnorm(p = probs, mean = optimized_parameters[1], sd = optimized_parameters[2])
qqplot(quant, sortNTL2, xlab = "Normal Distribution Theoretical Quantiles", ylab = "Data Quantiles")
abline(a = 0, b = 1, col = "red")
ad.test(x = sortNTL2, null = "norm")
Moffat <- function(x, amplitude, mu, alpha, beta){
amplitude*(1+((x-mu)^2/alpha^2))^(-beta)
}
#Function 1
A1 <- 4
mu1 <- 10
alpha1 <- 2
beta1 <- 3.8
String1 = paste("A =", A1, "mu =", mu1, "alpha =", alpha1, "beta =", beta1)
#Function 2
A2 <- 6
mu2 <- -3
alpha2 <- 0.7
beta2 <- 9
String2 = paste("A =", A2, "mu =", mu2, "alpha =", alpha2, "beta =", beta2)
#Function 3
A3 <- 2
mu3 <- 3.4
alpha3 <- 6.4
beta3 <- 0.7
String3 = paste("A =", A3, "mu =", mu3, "alpha =", alpha3, "beta = ", beta3)
ggplot() +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A1, mu = mu1, alpha = alpha1, beta = beta1), aes(colour = String1)) +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A2, mu = mu2, alpha = alpha2, beta = beta2), aes(colour = String2)) +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A3, mu = mu3, alpha = alpha3, beta = beta3), aes(colour = String3)) +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Models", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6)) +
labs(x = "x", y = "p(x)")
Moffat <- function(parameters, x){
amplitude <- parameters[[1]]
mu <- parameters[[2]]
alpha <- parameters[[3]]
beta <- parameters[[4]]
predictedDensity <- amplitude*(1+((x-mu)^2/alpha^2))^(-beta)
}
negLogLike <- function(parameters, x){
predictedDens <- Moffat(parameters, x)
return(-sum(log(predictedDens)))
}
#changing the value of the amplitude
amplitude <- seq(0.25, 5, by = 0.25)
changingA <- vector("numeric", length = 20)
for(i in 1:20){
parameters <- c(amplitude[[i]], 4115, 1, 1)
changingA[i] <- (negLogLike(parameters, line2$x))
}
#changing the value of mu
mu <- seq(4110, 4120, by = 0.5)
changingMu <- vector("numeric", length = 21)
for(i in 1:21){
parameters <- c(0.5, mu[[i]], 1, 1)
changingMu[i] <- (negLogLike(parameters, line2$x))
}
#changing the value of alpha
alpha <- seq(0.25, 10, by = 0.25)
changingAlpha <- vector("numeric", length = 40)
for(i in 1:40){
parameters <- c(0.5, 4115, alpha[[i]], 1)
changingAlpha[i] <- (negLogLike(parameters, line2$x))
}
#changing the value of beta
beta <- seq(0.25, 10, by = 0.25)
changingBeta <- vector("numeric", length = 40)
for(i in 1:40){
parameters <- c(0.5, 4115, 1, beta[[i]])
changingAlpha[i] <- (negLogLike(parameters, line2$x))
}
par(mfrow = c(2,2))
plot(amplitude, changingA, type = "l", xlab = "Amplitude", ylab = "Negative Log Likelihood")
plot(mu, changingMu, type = "l", xlab = "Mu", ylab = "Negative Log Likelihood")
plot(gamma, changingAlpha, type = "l", xlab = "Alpha", ylab = "Negative Log Likelihood")
plot(alpha, changingBeta, type = "l", xlab = "Beta", ylab = "Negative Log Likelihood")
#used for optimisation
MOFFATPDF <- function(parameters, x){
mu <- parameters[[1]]
alpha <- parameters[[2]]
beta <- parameters[[3]]
predictedDensity <- (gamma(beta)/(alpha*sqrt(pi)*gamma(beta-0.5)))*(1+((x-mu)/alpha)^2)^-beta
return(predictedDensity)
}
#used for plots
MOFFAT <- function(mu, alpha, beta, x){
gamma(beta)/(alpha*sqrt(pi)*gamma(beta-0.5))*(1+((x-mu)/alpha)^2)^-beta
}
#Function 1
mu1 <- 10
alpha1 <- 1.3
beta1 <- 4
String1 = paste("mu =", mu1, "alpha =", alpha1, "beta =", beta1)
#Function 2
mu2 <- -3
alpha2 <- 0.7
beta2 <- 6
String2 = paste("mu =", mu2, "alpha =", alpha2, "beta =", beta2)
#Function 3
mu3 <- 3.4
alpha3 <- 6.4
beta3 <- 2
String3 = paste("mu =", mu3, "alpha =", alpha3, "beta = ", beta3)
ggplot() +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu1, alpha = alpha1, beta = beta1), aes(colour = String1)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu2, alpha = alpha2, beta = beta2), aes(colour = String2)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu3, alpha = alpha3, beta = beta3), aes(colour = String3)) +
xlab("x") + ylab("p(x)") +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Distributions", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
NLL <- function(parameters, x){
predictedDensity <- MOFFATPDF(parameters, x)
return(-sum(log(predictedDensity)))
}
derivMOFFATPDF <- function(parameters, x){
mu <- parameters[[1]]
alpha <- parameters[[2]]
beta <- parameters[[3]]
dMu <- -sum((2*beta*(x-mu))/(alpha^2 + (x-mu)^2))
dAlpha <- -sum(-1/alpha + (2*beta*(x-mu)^2)/(alpha^3+alpha*(x-mu)^2))
dBeta <- -sum(digamma(beta)-digamma(beta-0.5)-log(1+(x-mu)^2/alpha^2))
return(c(dMu, dAlpha, dBeta))
}
initialGUESS <- c(mu = 4115, alpha = 1, beta = 4)
lowerBOUNDS <- c(0, 1e-6, 0.5)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDF, x = xl2, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2 <- RESULT$par
optimPAR2
optimDENS2 <- MOFFATPDF(optimPAR2, line2$x)
## plotting layers in ggplot
ggplot(line2) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("right"),
legend.margin = margin(6, 6, 6, 6))
quantile(sortNTL2)
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p, this equates to 0.
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot. For a probability, this will look to find a value of x that causes the findRoot function to equate to 0. This value of x is the quantile.
quantile <- uniroot(findRoot, interval = c(4000,4200))$root
return(quantile)
}
qmoffat(0.5, optimPAR2)
Vqmoffat <- Vectorize(qmoffat, vectorize.args = "p")
quantiles <- Vqmoffat(p = probs, params = optimPAR2)
data.frame(probs, quantiles)
quantile(sortNTL2) #data
quantile(quantiles) #theoretical values
qqplot(quantiles, sortNTL2,  xlab = "Moffat Distribution Theoretical Quantiles", ylab = "Data Quantiles")
abline(a = 0, b =1, col = "red")
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Distribution Theoretical Quantiles", ylab = "Data Quantiles")
abline(a = 0, b = 1, col = "red")
xRange <- seq(4105, 4125, length = 100)
MCDF <- function(x){
return(integrate(MOFFATPDF, lower = 4100, upper = x, parameters = optimPAR2)$value)
}
VMCDF <- Vectorize(MCDF, vectorize.args = "x")
VMCDF(x = 4115:4225)
xRANGE <- seq(4105, 4125, length = length(sortNTL2))
model <- VMCDF(xRANGE) #this represents the cumulative distribution of the 1D moffat distribution
plot(x = xRANGE, y = model)
dataset <- ecdf(sortNTL2)#this represents the cumulative distribution of the dataset
plot(dataset)
thereoticalProbs <- model
empiricalProbs <- dataset(xRANGE)
plot(thereoticalProbs, empiricalProbs, main = "P-P Plot", xlab = "Theoretical Probabilities", ylab = "Sample Probabilities", col = "blue", pch = 16)
abline(0, 1, col = "red", lty = 2)  # Add a reference line
par(mfrow = c(1,2))
qqplot(quantiles, sortNTL2,  xlab = "Moffat Distribution Theoretical Quantiles", ylab = "Data Quantiles")
abline(a = 0, b =1, col = "red")
plot(thereoticalProbs, empiricalProbs, main = "P-P Plot", xlab = "Theoretical Probabilities", ylab = "Sample Probabilities", col = "blue", pch = 16)
abline(0, 1, col = "red", lwd = 2)  # Add a reference line
xRange <- seq(4105, 4125, length = 100)
integrate(MOFFATPDF, lower = min(xRange), upper = max(xRange), parameters = optimPAR2)
MOFFATCDF <- vector("numeric", length = 100)
for (i in 1:100) {
MOFFATCDF[i] <- integrate(MOFFATPDF, lower = xRange[1], upper = xRange[i], parameters = optimPAR2)$value
}
MOFFATCDF
CDF <- cbind(xRange, MOFFATCDF)
plot(ecdf(noTiesL2), main = "KS Test - Moffat Distribution", ylab = "Probability", col = rgb(0,0,1, alpha = 0.1))
lines(CDF[,1], CDF[,2], type = "l", col = cbPalette[7], lwd = 2)
ks.test(x = sortNTL2, y = VMCDF)
AndersonDarlingTest(x = sortNTL2, null = VMCDF)
ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5]) +
stat_function(fun = gaussian_density, args = list(parameters = optimized_parameters), n=1000, aes(colour="Normal PDF"), linewidth=1.2) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("right"),
legend.margin = margin(6, 6, 6, 6))
plot(ecdf(noTiesL2), main = "KS Test", ylab = "Probability", col = cbPalette[5])
curve(pnorm(x, mean = 4115.19535, sd = 1.20138), add = TRUE, col = cbPalette[3], lwd = 2)
lines(CDF[,1], CDF[,2], type = "l", col = cbPalette[2], lwd = 2)
legend("bottomright", legend = c("ECDF", "Normal Dist  D = 1", "1D Moffat Dist  D = 0.0366"), col = cbPalette[c(5,3,2)], lty = c(1,1,1), lwd = c(1,2,2))
optimDENS1 <- MOFFATPDF(optimPAR1, xVal)
initialGUESS <- c(mu = 4115, alpha = 1, beta = 4)
lowerBOUNDS <- c(0, 1e-6, 0.5)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDF, x = line1$x, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR1 <- RESULT$par
optimPAR1
optimDENS1 <- MOFFATPDF(optimPAR1, xVal)
## plotting layers in ggplot
ggplot(line1) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR1), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
initialGUESS <- c(mu = 4115, alpha = 1, beta = 4)
lowerBOUNDS <- c(0, 1e-6, 0.5)
RESULT3 <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDF, x = line3$x, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR3 <- RESULT3$par
optimPAR3
optimDENS3 <- MOFFATPDF(optimPAR3, xVal)
## plotting layers in ggplot
modelline3 <- ggplot(line3) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR3), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
initialGUESS <- c(mu = 4115, alpha = 1, beta = 4)
lowerBOUNDS <- c(0, 1e-6, 0.5)
RESULT4 <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDF, x = line4$x, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR4 <- RESULT4$par
optimPAR4
optimDENS4 <- MOFFATPDF(optimPAR4, xVal)
## plotting layers in ggplot
modelline4 <- ggplot(line4) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR4), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
modelline1
optimDENS1 <- MOFFATPDF(optimPAR1, xVal)
## plotting layers in ggplot
modelline1 <- ggplot(line1) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR1), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
modelline1
modelline2
modelline1
modelline3
modelline4
knitr::opts_chunk$set(echo = TRUE)
xRange <- seq(4030, 4050, length = 100)
yRange <- seq(4060, 4080, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimCS1Par[[4]]-1)/(pi*optimCS1Par[[3]]^2)
initGuess <- c(x0 = 4039.865, y0 = 4071.066, alpha = 1, beta = 2)
lowerBounds <- c(0, 0, 1e-6, 1+1e-6)
result2D <- optim(par = initGuess, fn = NLL2D, gr = deriv2DNLL, x = celestialSource1$x, y = celestialSource1$y, method = "L-BFGS-B", lower = lowerBounds)
optimCS1Par <- result2D$par
optimCS1Par
xRange <- seq(4030, 4050, length = 100)
yRange <- seq(4060, 4080, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimCS1Par[[4]]-1)/(pi*optimCS1Par[[3]]^2)
parameters <- c(amplitude, optimCS1Par)
zCS1<- Moffat2D(grid, parameters)
zCS1Matrix <- matrix(zCS1, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zCS1Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
xRange <- seq(4030, 4050, length = 100)
yRange <- seq(4060, 4080, length = 100)
datac1 <- expand.grid(x = xRange, y = yRange)
model <- ggplot(celestialSource1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
contours <- ggplot(datac1, aes(x = x, y = y)) +
stat_contour(aes(z = zCS1), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
library(ggExtra)
xRange <- seq(4030, 4050, length = 100)
yRange <- seq(4060, 4080, length = 100)
datac1 <- expand.grid(x = xRange, y = yRange)
model <- ggplot(celestialSource1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
contours <- ggplot(datac1, aes(x = x, y = y)) +
stat_contour(aes(z = zCS1), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
#refiltering Celestial Source 1
CS1ZOOM <- celestialSource1 %>%
filter(x>4035 & x<4045 & y>4070 & y<4080)
#creating a point density plot
modelZoomedInCS1 <- ggplot(CS1ZOOM, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contourData <- ggplot_build(contours)$data[[1]]
#combining the contour plot and the point density plot
combined <- modelZoomedInCS1 + geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[5], alpha = 1, linewidth= 0.3)
#viewing
ggMarginal(combined, type = "histogram")
#plotting contours on the raw data
ggplot(CS1ZOOM, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
initGuess <- c(x0 = 4073.925, y0 = 4105.563, alpha = 1, beta = 2)
lowerBounds <- c(0, 0, 1e-6, 1+1e-6)
result2D <- optim(par = initGuess, fn = NLL2D, gr = deriv2DNLL, x = celestialSource2$x, y = celestialSource2$y, method = "L-BFGS-B", lower = lowerBounds)
optimCS2Par <- result2D$par
optimCS2Par
xRange <- seq(4070, 4080, length = 100)
yRange <- seq(4100, 4110, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimCS2Par[[4]]-1)/(pi*optimCS1Par[[3]]^2)
parameters <- c(amplitude, optimCS2Par)
zCS2<- Moffat2D(grid, parameters)
zCS2Matrix <- matrix(zCS2, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zCS2Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
xRange <- seq(4070, 4080, length = 100)
yRange <- seq(4100, 4110, length = 100)
datacs2 <- expand.grid(x = xRange, y = yRange)
model <- ggplot(celestialSource2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(5, 25, 125)) +
coord_fixed()
contours <- ggplot(datacs2, aes(x = x, y = y)) +
stat_contour(aes(z = zCS2), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
#plotting contours on the raw data
ggplot(celestialSource2, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
initGuess <- c(x0 = 4074.631, y0 = 4156.233, alpha = 1, beta = 2)
lowerBounds <- c(0, 0, 1e-6, 1+1e-6)
result2D <- optim(par = initGuess, fn = NLL2D, gr = deriv2DNLL, x = celestialSource3$x, y = celestialSource3$y, method = "L-BFGS-B", lower = lowerBounds)
optimCS3Par <- result2D$par
optimCS3Par
xRange <- seq(4070, 4080, length = 100)
yRange <- seq(4150, 4160, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimCS3Par[[4]]-1)/(pi*optimCS1Par[[3]]^2)
parameters <- c(amplitude, optimCS3Par)
zCS3<- Moffat2D(grid, parameters)
zCS3Matrix <- matrix(zCS3, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zCS3Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
xRange <- seq(4070, 4080, length = 100)
yRange <- seq(4150, 4160, length = 100)
datac1 <- expand.grid(x = xRange, y = yRange)
model <- ggplot(celestialSource3, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(5, 25, 125)) +
coord_fixed()
contours <- ggplot(datac1, aes(x = x, y = y)) +
stat_contour(aes(z = zCS3), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
#viewing
ggMarginal(combined, type = "histogram")
#plotting contours on the raw data
ggplot(celestialSource3, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
