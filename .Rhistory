combined <- modelZoomedInPOI2 + geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[5], alpha = 1, linewidth= 0.3)
#viewing
ggMarginal(combined, type = "histogram")
#plotting contours on the raw data
ggplot(POI2ZOOM, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
library(cowplot)
margX <- ggdensity(POI2, "x")
margY <- ggdensity(POI2, "y") + rotate()
combined <- combined + rremove("legend")
margY <- margY + clean_theme() + rremove("legend")
margX <- margX + clean_theme() + rremove("legend")
# Arranging the plot using cowplot
plot_grid(margX, NULL, combined, margY, ncol = 2, align = "hv",
rel_widths = c(2, 1), rel_heights = c(1, 2))
library(cowplot)
margX <- ggdensity(POI2, "x")
margY <- ggdensity(POI2, "y") + rotate()
margY
combined <- combined + rremove("legend")
margY <- margY + clean_theme() + rremove("legend")
margX <- margX + clean_theme() + rremove("legend")
# Arranging the plot using cowplot
plot_grid(margX, NULL, combined, margY, ncol = 2, align = "hv",
rel_widths = c(2, 1), rel_heights = c(1, 2))
library(cowplot)
margX <- ggdensity(POI2, "x")
margY <- ggdensity(POI2, "y")
margY
combined <- combined + rremove("legend")
margY <- margY + clean_theme() + rremove("legend")
margX <- margX + clean_theme() + rremove("legend")
# Arranging the plot using cowplot
plot_grid(margX, NULL, combined, margY, ncol = 2, align = "hv",
rel_widths = c(2, 1), rel_heights = c(1, 2))
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4045, 4055, length = 100)
data <- expand.grid(x = xRange, y = yRange)
model <- ggplot(POI2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contours <- ggplot(data, aes(x = x, y = y)) +
stat_contour(aes(z = zPOI2), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
#filter(x>4110 & x<4120 & y>4048 & y<4058)
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4048, 4058, length = 100)
data <- expand.grid(x = xRange, y = yRange)
jointPDFValues <- outer(X = xRange, Y = yRange, Moffat2DPDF, parameters = optimPOI2Par)
marginalX <- apply(jointPDFValues, 1, sum)
marginalY <- apply(jointPDFValues, 2, sum) + rotate()
plot(xRange, marginalX, type = "l", xlab = "x", ylab = "Density", main = "Marginal PDF of x")
plot(yRange, marginalY, type = "l", xlab = "y", ylab = "Density", main = "Marginal PDF of y")
library(cowplot)
margX <- ggdensity(POI2, "x")
margY <- ggdensity(POI2, "y") + rotate()
margY
combined <- combined + rremove("legend")
margY <- margY + clean_theme() + rremove("legend")
margX <- margX + clean_theme() + rremove("legend")
# Arranging the plot using cowplot
plot_grid(margX, NULL, combined, margY, ncol = 2, align = "hv",
rel_widths = c(2, 1), rel_heights = c(1, 2))
library(cowplot)
combined <- ggMarginal(combined, type = "histogram")
margX <- ggdensity(POI2, "x")
margY <- ggdensity(POI2, "y") + rotate()
margY
combined <- combined + rremove("legend")
margY <- margY + clean_theme() + rremove("legend")
margX <- margX + clean_theme() + rremove("legend")
# Arranging the plot using cowplot
plot_grid(margX, NULL, combined, margY, ncol = 2, align = "hv",
rel_widths = c(2, 1), rel_heights = c(1, 2))
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
library(cowplot)
margX <- ggdensity(POI2, "x")
margY <- ggdensity(POI2, "y") + rotate()
margY
combined <- combined + rremove("legend")
margY <- margY + clean_theme() + rremove("legend")
margX <- margX + clean_theme() + rremove("legend")
# Arranging the plot using cowplot
plot_grid(margX, NULL, combined, margY, ncol = 2, align = "hv",
rel_widths = c(2, 1), rel_heights = c(1, 2))
#filter(x>4110 & x<4120 & y>4048 & y<4058)
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4048, 4058, length = 100)
data <- expand.grid(x = xRange, y = yRange)
jointPDFValues <- outer(X = xRange, Y = yRange, Moffat2DPDF, parameters = optimPOI2Par)
marginalX <- apply(jointPDFValues, 1, sum)
marginalY <- apply(jointPDFValues, 2, sum)
plot(xRange, marginalX, type = "l", xlab = "x", ylab = "Density", main = "Marginal PDF of x")
plot(yRange, marginalY, type = "l", xlab = "y", ylab = "Density", main = "Marginal PDF of y")
#filter(x>4110 & x<4120 & y>4048 & y<4058)
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4048, 4058, length = 100)
data <- expand.grid(x = xRange, y = yRange)
jointPDFValues <- outer(X = xRange, Y = yRange, Moffat2DPDF, parameters = optimPOI2Par)
marginalX <- apply(jointPDFValues, 1, sum)
marginalY <- apply(jointPDFValues, 2, sum)
plot(xRange, marginalX, type = "l", xlab = "x", ylab = "Density", main = "Marginal PDF of x")
plot(yRange, marginalY, type = "l", xlab = "y", ylab = "Density", main = "Marginal PDF of y")
ggplot() + geom_density(x = xRange, y = marginalX)
#filter(x>4110 & x<4120 & y>4048 & y<4058)
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4048, 4058, length = 100)
data <- expand.grid(x = xRange, y = yRange)
jointPDFValues <- outer(X = xRange, Y = yRange, Moffat2DPDF, parameters = optimPOI2Par)
marginalX <- apply(jointPDFValues, 1, sum)
marginalY <- apply(jointPDFValues, 2, sum)
plot(xRange, marginalX, type = "l", xlab = "x", ylab = "Density", main = "Marginal PDF of x")
plot(yRange, marginalY, type = "l", xlab = "y", ylab = "Density", main = "Marginal PDF of y")
ggplot() + geom_density(aes(x = xRange, y = marginalX))
#filter(x>4110 & x<4120 & y>4048 & y<4058)
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4048, 4058, length = 100)
data <- expand.grid(x = xRange, y = yRange)
jointPDFValues <- outer(X = xRange, Y = yRange, Moffat2DPDF, parameters = optimPOI2Par)
marginalX <- apply(jointPDFValues, 1, sum)
marginalY <- apply(jointPDFValues, 2, sum)
plot(xRange, marginalX, type = "l", xlab = "x", ylab = "Density", main = "Marginal PDF of x")
plot(yRange, marginalY, type = "l", xlab = "y", ylab = "Density", main = "Marginal PDF of y")
ggplot() + geom_density(x = xRange, y = marginalX)
#filter(x>4110 & x<4120 & y>4048 & y<4058)
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4048, 4058, length = 100)
data <- expand.grid(x = xRange, y = yRange)
jointPDFValues <- outer(X = xRange, Y = yRange, Moffat2DPDF, parameters = optimPOI2Par)
marginalX <- apply(jointPDFValues, 1, sum)
marginalY <- apply(jointPDFValues, 2, sum)
plot(xRange, marginalX, type = "l", xlab = "x", ylab = "Density", main = "Marginal PDF of x")
plot(yRange, marginalY, type = "l", xlab = "y", ylab = "Density", main = "Marginal PDF of y")
ggplot(POI2) +
geom_density(x = xRange, y = marginalX)
#filter(x>4110 & x<4120 & y>4048 & y<4058)
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4048, 4058, length = 100)
data <- expand.grid(x = xRange, y = yRange)
jointPDFValues <- outer(X = xRange, Y = yRange, Moffat2DPDF, parameters = optimPOI2Par)
marginalX <- apply(jointPDFValues, 1, sum)
marginalY <- apply(jointPDFValues, 2, sum)
plot(xRange, marginalX, type = "l", xlab = "x", ylab = "Density", main = "Marginal PDF of x")
plot(yRange, marginalY, type = "l", xlab = "y", ylab = "Density", main = "Marginal PDF of y")
ggplot(POI2$x) +
geom_density(x = xRange, y = marginalX)
knitr::opts_chunk$set(echo = TRUE)
qqplot(sortNTL2, VMCDF)
quantile(sortNTL2)
quantile(sortNTL2)
quantile(MOFFATPDF(optimPAR2, xRange))
xRange <- seq(4105, 4125, length = 100)
MCDF <- function(x){
return(integrate(MOFFATPDF, lower = 4100, upper = x, parameters = optimPAR2)$value)
}
VMCDF <- Vectorize(MCDF, vectorize.args = "x")
VMCDF(x = 4115:4225)
quantile(sortNTL2)
quantile(MOFFATPDF(optimPAR2, xRange))
quantile(sortNTL2)
MOFFATPDF(optimPAR2, xRange)
pmoffat <- function(range, q, params){
integrate(MOFFATPDF, lower = min(range), upper = q, parameters = params)
}
qRange <- seq(4105, 4125, length = 100)
#qRange
l <- length(qRange)
#pmoffat(xRange, 4115.5, optimPAR2)$value
probs <- numeric(length = l)
for(i in 1:l){
probs[i] <- pmoffat(range = xRange, qRange[i] , params = optimPAR2)$value
}
probs
quantiles <- data.frame(qRange, probs)
quantiles
quantile(sortNTL2)
View(MOFFATPDF)
pmoffat <- function(q, params){
integrate(MOFFATPDF, lower = -Inf, upper = q, parameters = params)
}
pmoffat(4115, optimPAR2)
qRange <- seq(4105, 4125, length = 100)
#qRange
l <- length(qRange)
#pmoffat(xRange, 4115.5, optimPAR2)$value
# probs <- numeric(length = l)
# for(i in 1:l){
#  probs[i] <- pmoffat(range = xRange, qRange[i] , params = optimPAR2)$value
# }
#
# probs #this is a vector of probabilities
pmoffat <- function(q, params){
integrate(MOFFATPDF, lower = -Inf, upper = q, parameters = params)
}
pmoffat(4115, optimPAR2)
qRange <- seq(4105, 4125, length = 100)
#qRange
l <- length(qRange)
#pmoffat(xRange, 4115.5, optimPAR2)$value
probs <- numeric(length = l)
for(i in 1:l){
probs[i] <- pmoffat(qRange[i] , params = optimPAR2)$value
}
probs #this is a vector of probabilities
quantiles <- data.frame(qRange, probs)
quantiles #this is a dataframe that matches each probability to it's x-value
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
uniroot(find_root, interval = c(-100, 100))
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
uniroot(findRoot, interval = c(-100, 100))
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = optimPAR2)$value - p
}
uniroot(findRoot, interval = c(-100, 100))
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot
quantile <- uniroot(findRoot, interval = c(-100, 100))$root
return(quantile)
}
# Example usage
probs <- seq(0.01, 0.99, by = 0.01)
# Calculate quantiles from probabilities
quantiles <- sapply(probs, function(p) qmoffat(p, optimPAR2))
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot
quantile <- uniroot(findRoot, interval = c(-100, 100))$root
return(quantile)
}
# Example usage
probs <- seq(0.01, 0.99, by = 0.01)
# Calculate quantiles from probabilities
quantiles <- sapply(probs,qmoffat(p, optimPAR2))
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot
quantile <- uniroot(findRoot, interval = c(-100, 100))$root
return(quantile)
}
# Example usage
probs <- seq(0.01, 0.99, by = 0.01)
# Calculate quantiles from probabilities
quantiles <- sapply(probs, function(p) qmoffat(p, optimPAR2))
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot
quantile <- uniroot(findRoot, interval = c(4000,4200))$root
return(quantile)
}
# Example usage
probs <- seq(0.01, 0.99, by = 0.01)
# Calculate quantiles from probabilities
quantiles <- sapply(probs, function(p) qmoffat(p, optimPAR2))
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot
quantile <- uniroot(findRoot, interval = c(4000,4200))$root
return(quantile)
}
# Example usage
probs <- seq(0.01, 0.99, by = 0.01)
# Calculate quantiles from probabilities
quantiles <- sapply(probs, function(p) qmoffat(p, optimPAR2))
quantiles
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot
quantile <- uniroot(findRoot, interval = c(4000,4200))$root
return(quantile)
}
probs <- seq(0.01, 0.99, by = 0.01)
qmoffat(probs, optimPAR2)
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot
quantile <- uniroot(findRoot, interval = c(4000,4200))$root
return(quantile)
}
probs <- seq(0.01, 0.99, by = 0.01)
qmoffat(0.5, optimPAR2)
# Calculate quantiles from probabilities
quantiles <- sapply(probs, function(p) qmoffat(p, optimPAR2))
quantiles
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = optimPAR2)$value
}
findRoot(4115)
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p, this equates to 0.
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot. For a probability, this will look to find a value of x that causes the findRoot function to equate to 0. This value of x is the quantile.
quantile <- uniroot(findRoot, interval = c(4000,4200))$root
return(quantile)
}
probs <- seq(0.01, 0.99, by = 0.01)
qmoffat(0.5, optimPAR2)
Vqmoffat <- Vectorize(qmoffat, vectorize.args = "p")
Vqmoffat(p = probs)
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p, this equates to 0.
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot. For a probability, this will look to find a value of x that causes the findRoot function to equate to 0. This value of x is the quantile.
quantile <- uniroot(findRoot, interval = c(4000,4200))$root
return(quantile)
}
probs <- seq(0.01, 0.99, by = 0.01)
qmoffat(0.5, optimPAR2)
Vqmoffat <- Vectorize(qmoffat, vectorize.args = "p")
Vqmoffat(p = probs, params = optimPAR2)
# # Calculate quantiles from probabilities
# quantiles <- sapply(probs, function(p) qmoffat(p, optimPAR2))
# quantiles
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p, this equates to 0.
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot. For a probability, this will look to find a value of x that causes the findRoot function to equate to 0. This value of x is the quantile.
quantile <- uniroot(findRoot, interval = c(4000,4200))$root
return(quantile)
}
probs <- seq(0.01, 0.99, by = 0.01)
qmoffat(0.5, optimPAR2)
Vqmoffat <- Vectorize(qmoffat, vectorize.args = "p")
quantiles <- Vqmoffat(p = probs, params = optimPAR2)
data.frame(probs, quantiles)
# Define the inverse cumulative distribution function (quantile function) for Moffat distribution
qmoffat <- function(p, params) {
# Define a function to find the root (quantile) of CDF - p, this equates to 0.
findRoot <- function(x) {
integrate(MOFFATPDF, lower = -Inf, upper = x, parameters = params)$value - p
}
# Find the root (quantile) using uniroot. For a probability, this will look to find a value of x that causes the findRoot function to equate to 0. This value of x is the quantile.
quantile <- uniroot(findRoot, interval = c(4000,4200))$root
return(quantile)
}
probs <- seq(0.01, 0.99, by = 0.01)
qmoffat(0.5, optimPAR2)
Vqmoffat <- Vectorize(qmoffat, vectorize.args = "p")
quantiles <- Vqmoffat(p = probs, params = optimPAR2)
data.frame(probs, quantiles)
quantile(quantiles)
quantile(sortNTL2) #data
quantile(quantiles) #theoretical values
qqplot(sortNTL2, quantiles)
qqplot(sortNTL2, quantiles, ylim = c(4105, 4125))
qqplot(sortNTL2, quantiles, ylim = c(4105, 4125))
qqline(quantiles)
qqplot(quantiles, sortNTL2)
qqplot(quantiles, sortNTL2, ylim(4110, 4120))
qqplot(quantiles, sortNTL2, ylim = c(4110, 4120))
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118))
qqplot(quantiles, sortNTL2, ylim = c(4110, 4120))
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4110, 4120))
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118))
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118)
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118))
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
qqplot(quantiles, sortNTL2)
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
qqplot(quantiles, sortNTL2)
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
lines(x = y)
qqplot(quantiles, sortNTL2)
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
abline(x = y)
qqplot(quantiles, sortNTL2)
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
qqplot(quantiles, sortNTL2)
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
abline(a = 0, b = 1)
qqplot(quantiles, sortNTL2)
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
abline(a = 0, b = 1, col = "red")
qqplot(quantiles, sortNTL2)
abline(a = 0, b =1, col = "red")
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
abline(a = 0, b = 1, col = "red")
qqplot(quantiles, sortNTL2,  xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
abline(a = 0, b =1, col = "red")
par(pty = "s")
qqplot(quantiles, sortNTL2, ylim = c(4112, 4118), xlab = "Moffat Model Theoretical Quantiles", ylab = "Data Quantiles")
abline(a = 0, b = 1, col = "red")
pplot(ecdf(sortNTL2), VMCDF(x = 41105:4225))
ppplot(ecdf(sortNTL2), VMCDF(x = 41105:4225))
plot(ecdf(sortNTL2), VMCDF(x = 4105:4125))
plot(VMCDF(x = 4105:4125))
plot(VMCDF(x = 4105:4125), ecdf(sortNTL2))
plot(ppoints(quantiles), ppoints(sortNTL2))
fitdist(sortNTL2, moffat)
library(fitdistrplus)
fitdist(sortNTL2, moffat)
fitdist(sortNTL2, "moffat")
dmoffat <- function(parameters, x){
mu <- parameters[[1]]
alpha <- parameters[[2]]
beta <- parameters[[3]]
alpha <- pmax(alpha, 1e-6)
beta <- pmax(beta, 1.5)
predictedDensity <- (gamma(beta)/(alpha*sqrt(pi)*gamma(beta-0.5)))*(1+((x-mu)/alpha)^2)^-beta
return(predictedDensity)
}
fitdist(sortNTL2, "moffat")
fitdist(sortNTL2, "moffat", parameters = optimPAR2)
fitdist(sortNTL2, "moffat", parameters = optimPAR2)
fitdist(sortNTL2, "moffat", parameters = optimPAR2, x = 4105:4125)
fitdist(sortNTL2, "moffat", parameters = optimPAR2, x = 4105:4125)
plot(VMCDF(x = 4105:4125))
plot(VMCDF(x = 4105:4125), ecdf(sortNTL2))
plot(VMCDF(x = seq(4105, 4125, length = length(sortNTL2))), ecdf(sortNTL2))
ecdf(sortNTL2)
plot(VMCDF(x = seq(4105, 4125, length = length(sortNTL2))), ecdf(sortNTL2))
plot(ecdf(sortNTL2))
#plot(VMCDF(x = seq(4105, 4125, length = length(sortNTL2))), ecdf(sortNTL2))
plot(ecdf(sortNTL2))
length(sortNTL2)
#plot(VMCDF(x = seq(4105, 4125, length = length(sortNTL2))), ecdf(sortNTL2))
plot(ecdf(sortNTL2))
length(sortNTL2)
plot(VMCDF(x = seq(4105, 4125, length = length(sortNTL2))), ecdf(sortNTL2))
plot(ecdf(sortNTL2))
length(sortNTL2)
plot(VMCDF(x = seq(4105, 4125, length = 865), ecdf(sortNTL2))
plot(ecdf(sortNTL2))
length(sortNTL2)
plot(VMCDF(x = seq(4105, 4125, length = 865)), ecdf(sortNTL2))
ppoint(sortNTL2)
ppoints(sortNTL2)
ppoints(sortNTL2)
ppoints(quantiles)
plot(VMCDF(x = 4105:4125), ppoints(sortNTL2))
approx(ppoints(model_probs), model_probs, ppoints(raw_data))$y
model <- VMCDF(4105:4125)
approx(ppoints(model), model, ppoints(sortNTL2))$y
#plot(VMCDF(x = 4105:4125), ppoints(sortNTL2))
model <- VMCDF(4110:4120)
approx(ppoints(model), model, ppoints(sortNTL2))$y
#plot(VMCDF(x = 4105:4125), ppoints(sortNTL2))
model <- VMCDF(4112:4118)
approx(ppoints(model), model, ppoints(sortNTL2))$y
#plot(VMCDF(x = 4105:4125), ppoints(sortNTL2))
model <- VMCDF(4105:4125)
approx(ppoints(model), model, ppoints(sortNTL2))$y
#plot(VMCDF(x = 4105:4125), ppoints(sortNTL2))
model <- VMCDF(4105:4125)
interModel <- approx(ppoints(model), model, ppoints(sortNTL2))$y
#plot(VMCDF(x = 4105:4125), ppoints(sortNTL2))
plot(ppoints(sortNTL2), ppoints(sortNTL2), main = "P-P Plot", xlab = "Raw Data Probability", ylab = "Model Probability", col = "blue", pch = 16)
points(ppoints(sortNTL2), ppoints(sort(interModel)), col = "red", pch = 16)
