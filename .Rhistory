geom_hline(yintercept = 4049.5) +
geom_hline(yintercept = 4050.5) +
geom_hline(yintercept = 4051.5) +
geom_hline(yintercept = 4052.5) +
geom_hline(yintercept = 4053.5) +
geom_hline(yintercept = 4054.5)
RAWPOI2 +
geom_hline(yintercept = 4049.5) +
geom_hline(yintercept = 4050.5, colour = "blue") +
geom_hline(yintercept = 4051.5, colour = "blue") +
geom_hline(yintercept = 4052.5) +
geom_hline(yintercept = 4053.5) +
geom_hline(yintercept = 4054.5)
modelPOI2 +
geom_hline(yintercept = 4049.5) +
geom_hline(yintercept = 4050.5) +
geom_hline(yintercept = 4051.5) +
geom_hline(yintercept = 4052.5) +
geom_hline(yintercept = 4053.5) +
geom_hline(yintercept = 4054.5)
RAWPOI2 +
geom_hline(yintercept = 4049.5) +
geom_hline(yintercept = 4050.5) +
geom_hline(yintercept = 4051.5) +
geom_hline(yintercept = 4052.5) +
geom_hline(yintercept = 4053.5) +
geom_hline(yintercept = 4054.5)
RAWPOI2 +
geom_hline(yintercept = 4049.5) +
geom_hline(yintercept = 4050.5, colour = "red") +
geom_hline(yintercept = 4051.5, colour = "red") +
geom_hline(yintercept = 4052.5) +
geom_hline(yintercept = 4053.5) +
geom_hline(yintercept = 4054.5)
optimParameters2N <- gaussian_density(optimized_parameters, xl2)
histWithNormL2 <- histLine2 +
stat_function(fun = gaussian_density, args = list(parameters = optimized_parameters), n=1000, aes(colour="gaussian distribution"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("right"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
histWithNormL2
Moffat <- function(x, amplitude, mu, alpha, beta){
amplitude*(1+((x-mu)^2/alpha^2))^(-beta)
}
#Function 1
A1 <- 4
mu1 <- 10
alpha1 <- 2
beta1 <- 3.8
String1 = paste("A =", A1, "mu =", mu1, "alpha =", alpha1, "beta =", beta1)
#Function 2
A2 <- 6
mu2 <- -3
alpha2 <- 0.7
beta2 <- 9
String2 = paste("A =", A2, "mu =", mu2, "alpha =", alpha2, "beta =", beta2)
#Function 3
A3 <- 2
mu3 <- 3.4
alpha3 <- 6.4
beta3 <- 0.7
String3 = paste("A =", A3, "mu =", mu3, "alpha =", alpha3, "beta = ", beta3)
ggplot() +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A1, mu = mu1, alpha = alpha1, beta = beta1), aes(colour = String1)) +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A2, mu = mu2, alpha = alpha2, beta = beta2), aes(colour = String2)) +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A3, mu = mu3, alpha = alpha3, beta = beta3), aes(colour = String3)) +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Distributions", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
Moffat <- function(x, amplitude, mu, alpha, beta){
amplitude*(1+((x-mu)^2/alpha^2))^(-beta)
}
#Function 1
A1 <- 4
mu1 <- 10
alpha1 <- 2
beta1 <- 3.8
String1 = paste("A =", A1, "mu =", mu1, "alpha =", alpha1, "beta =", beta1)
#Function 2
A2 <- 6
mu2 <- -3
alpha2 <- 0.7
beta2 <- 9
String2 = paste("A =", A2, "mu =", mu2, "alpha =", alpha2, "beta =", beta2)
#Function 3
A3 <- 2
mu3 <- 3.4
alpha3 <- 6.4
beta3 <- 0.7
String3 = paste("A =", A3, "mu =", mu3, "alpha =", alpha3, "beta = ", beta3)
ggplot() +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A1, mu = mu1, alpha = alpha1, beta = beta1), aes(colour = String1)) +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A2, mu = mu2, alpha = alpha2, beta = beta2), aes(colour = String2)) +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A3, mu = mu3, alpha = alpha3, beta = beta3), aes(colour = String3)) +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Models", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
MOFFATPDF <- function(parameters, x){
mu <- parameters[[1]]
alpha <- parameters[[2]]
beta <- parameters[[3]]
predictedDensity <- (gamma(beta)/(alpha*sqrt(pi)*gamma(beta-0.5)))*(1+((x-mu)/alpha)^2)^-beta
return(predictedDensity)
}
MOFFAT <- function(mu, alpha, beta, x){
gamma(beta)/(alpha*sqrt(pi)*gamma(beta-0.5))*(1+((x-mu)/alpha)^2)^-beta
}
#Function 1
mu1 <- 10
alpha1 <- 1.3
beta1 <- 4
String1 = paste("mu =", mu1, "alpha =", alpha1, "beta =", beta1)
#Function 2
mu2 <- -3
alpha2 <- 0.7
beta2 <- 6
String2 = paste("mu =", mu2, "alpha =", alpha2, "beta =", beta2)
#Function 3
mu3 <- 3.4
alpha3 <- 6.4
beta3 <- 2
String3 = paste("mu =", mu3, "alpha =", alpha3, "beta = ", beta3)
ggplot() +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu1, alpha = alpha1, beta = beta1), aes(colour = String1)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu2, alpha = alpha2, beta = beta2), aes(colour = String2)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu3, alpha = alpha3, beta = beta3), aes(colour = String3)) +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Models", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
#Function 1
mu1 <- 10
alpha1 <- 1.3
beta1 <- 4
String1 = paste("mu =", mu1, "alpha =", alpha1, "beta =", beta1)
#Function 2
mu2 <- -3
alpha2 <- 0.7
beta2 <- 6
String2 = paste("mu =", mu2, "alpha =", alpha2, "beta =", beta2)
#Function 3
mu3 <- 3.4
alpha3 <- 6.4
beta3 <- 2
String3 = paste("mu =", mu3, "alpha =", alpha3, "beta = ", beta3)
ggplot() +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu1, alpha = alpha1, beta = beta1), aes(colour = String1)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu2, alpha = alpha2, beta = beta2), aes(colour = String2)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu3, alpha = alpha3, beta = beta3), aes(colour = String3)) +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Distributions", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
#Function 1
mu1 <- 10
alpha1 <- 1.3
beta1 <- 4
String1 = paste("mu =", mu1, "alpha =", alpha1, "beta =", beta1)
#Function 2
mu2 <- -3
alpha2 <- 0.7
beta2 <- 6
String2 = paste("mu =", mu2, "alpha =", alpha2, "beta =", beta2)
#Function 3
mu3 <- 3.4
alpha3 <- 6.4
beta3 <- 2
String3 = paste("mu =", mu3, "alpha =", alpha3, "beta = ", beta3)
ggplot() +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu1, alpha = alpha1, beta = beta1), aes(colour = String1)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu2, alpha = alpha2, beta = beta2), aes(colour = String2)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu3, alpha = alpha3, beta = beta3), aes(colour = String3)) +
xlab(x = "x") + ylab(y = "p(x)") +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Distributions", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
#Function 1
mu1 <- 10
alpha1 <- 1.3
beta1 <- 4
String1 = paste("mu =", mu1, "alpha =", alpha1, "beta =", beta1)
#Function 2
mu2 <- -3
alpha2 <- 0.7
beta2 <- 6
String2 = paste("mu =", mu2, "alpha =", alpha2, "beta =", beta2)
#Function 3
mu3 <- 3.4
alpha3 <- 6.4
beta3 <- 2
String3 = paste("mu =", mu3, "alpha =", alpha3, "beta = ", beta3)
ggplot() +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu1, alpha = alpha1, beta = beta1), aes(colour = String1)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu2, alpha = alpha2, beta = beta2), aes(colour = String2)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu3, alpha = alpha3, beta = beta3), aes(colour = String3)) +
xlab("x") + ylab("p(x)") +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Distributions", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
initialGUESS <- c(mu = 4115, alpha = 1, beta = 4)
lowerBOUNDS <- c(0, 1e-6, 1.5)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDF, x = xl2.5, method = "L-BFGS-B", lower = lowerBOUNDS)
library(ggplot2)
library(plotly)
library(readr)
library(ggpointdensity)
library(viridis)
library(tidyr)
library(fitdistrplus)
## Color palette
cbPalette <- c("#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
library(here)
i_am("MoffatPDF.Rmd")
# laptop data from csv
Terzan5 <- readr::read_csv(here("Data", "Terzan 5 X-ray events.csv"), col_types = list(.default = readr::col_guess()), )
# head(Terzan5)
#fishbowl data from ODS
# library(readODS)
# Terzan5 <- read_ods(here("Raw Data.ods"), col_types = list(.default = readr::col_guess()), )
#removing extraneous columns
T5 <- data.frame(Terzan5$x, Terzan5$y)
colnames(T5) <- c('x','y')
modelTerzan5 <- ggplot(T5,aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000, 10000)) +
coord_fixed()
modelTerzan5
POI1 <- T5 %>%
filter(x>4160 & x<4180 & y>4180 & y<4200)
POI2 <- T5 %>%
filter(x>4105 & x< 4125 & y>4040 & y<4060)
modelPOI1 <- ggplot(POI1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
modelPOI2 <- ggplot(POI2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
RAWPOI1 <- ggplot(POI1, aes(x,y)) +
geom_point(size = 0.5) +
coord_fixed()
RAWPOI2<- ggplot(POI2, aes(x,y)) +
geom_point(size = 0.5) +
coord_fixed()
modelPOI1
modelPOI2
RAWPOI1
RAWPOI2
# line0 <- POI2 %>%
#   filter(y>4048.5 & y< 4049.5)
# line1 <- POI2 %>%
#   filter(y>4049.5 & y< 4050.5)
line2 <- POI2 %>%
filter(y>4050.5 & y< 4051.5)
# line3 <- POI2 %>%
#   filter(y>4051.5 & y< 4052.5)
# line4 <- POI2 %>%
#   filter(y>4052.5 & y< 4053.5)
# line5 <- POI2 %>%
#   filter(y>4053.5 & y< 4054.5)
# line6 <- POI2 %>%
#   filter(y>4054.5 & y< 4055.5)
# lineback <- POI2 %>%
#   filter(y>4055 & y< 4060)
line2.5 <- POI2 %>%
filter(y>4050.5 & y< 4051)
modelPOI2 +
geom_hline(yintercept = 4049.5) +
geom_hline(yintercept = 4050.5) +
geom_hline(yintercept = 4051.5) +
geom_hline(yintercept = 4052.5) +
geom_hline(yintercept = 4053.5) +
geom_hline(yintercept = 4054.5)
RAWPOI2 +
geom_hline(yintercept = 4049.5) +
geom_hline(yintercept = 4050.5) +
geom_hline(yintercept = 4051.5) +
geom_hline(yintercept = 4052.5) +
geom_hline(yintercept = 4053.5) +
geom_hline(yintercept = 4054.5)
RAWPOI2 +
geom_hline(yintercept = 4049.5) +
geom_hline(yintercept = 4050.5, colour = "red") +
geom_hline(yintercept = 4051.5, colour = "red") +
geom_hline(yintercept = 4052.5) +
geom_hline(yintercept = 4053.5) +
geom_hline(yintercept = 4054.5)
histLine2 <- ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5])
histLine2
xl2 <- line2$x
# Define the Gaussian density function
gaussian_density <- function(parameters, x) {
mean <- parameters[[1]]
sd <- parameters[[2]]
return(dnorm(x, mean = mean, sd = sd))
}
# Define the negative log-likelihood function for Gaussian distribution
negative_log_likelihood <- function(parameters, x) {
predicted_density <- gaussian_density(parameters, x)
return(-sum(log(predicted_density)))
}
initial_guess <- c(mean = 4115, sd = 1)
# Optimize the negative log-likelihood function
result <- optim(par = initial_guess, fn = negative_log_likelihood, x = xl2, method = "Nelder-Mead")
#check for convergence
result
# Extract the optimized parameters
optimized_parameters <- result$par
optimized_parameters
optimParameters2N <- gaussian_density(optimized_parameters, xl2)
histWithNormL2 <- histLine2 +
stat_function(fun = gaussian_density, args = list(parameters = optimized_parameters), n=1000, aes(colour="gaussian distribution"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("right"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
histWithNormL2
Moffat <- function(x, amplitude, mu, alpha, beta){
amplitude*(1+((x-mu)^2/alpha^2))^(-beta)
}
#Function 1
A1 <- 4
mu1 <- 10
alpha1 <- 2
beta1 <- 3.8
String1 = paste("A =", A1, "mu =", mu1, "alpha =", alpha1, "beta =", beta1)
#Function 2
A2 <- 6
mu2 <- -3
alpha2 <- 0.7
beta2 <- 9
String2 = paste("A =", A2, "mu =", mu2, "alpha =", alpha2, "beta =", beta2)
#Function 3
A3 <- 2
mu3 <- 3.4
alpha3 <- 6.4
beta3 <- 0.7
String3 = paste("A =", A3, "mu =", mu3, "alpha =", alpha3, "beta = ", beta3)
ggplot() +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A1, mu = mu1, alpha = alpha1, beta = beta1), aes(colour = String1)) +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A2, mu = mu2, alpha = alpha2, beta = beta2), aes(colour = String2)) +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A3, mu = mu3, alpha = alpha3, beta = beta3), aes(colour = String3)) +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Models", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
Moffat <- function(parameters, x){
amplitude <- parameters[[1]]
mu <- parameters[[2]]
gamma <- parameters[[3]]
alpha <- parameters[[4]]
amplitude <- pmax(amplitude, 1e-6)
gamma <- pmax(gamma, 1e-6)
alpha <- pmax(alpha, 1e-6)
#limiting values, amplitude must be greater than 0. As I am creating a probability density function, the area under the curve sums to 1.
#gamma can't equal zero, otherwise there is a math error.
#alpha can't equal 0 otherwise the density will be equal to 1 for everything. It can't be less than zero as that'll cause the density to be greater than 1.
predictedDensity <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
negLogLike <- function(parameters, x){
predictedDens <- Moffat(parameters, x)
return(-sum(log(predictedDens)))
}
#changing the value of the amplitude
amplitude <- seq(0.25, 5, by = 0.25)
i <- 1
changingA <- vector("numeric", length = 20)
while(i<=20){
parameters <- c(amplitude[[i]], 4115, 1, 1)
changingA[i] <- (negLogLike(parameters, xl2))
i <- i+1
}
#changing the value of mu
mu <- seq(4110, 4120, by = 0.5)
i <- 1
changingMu <- vector("numeric", length = 21)
while(i<=21){
parameters <- c(0.5, mu[[i]], 1, 1)
changingMu[i] <- (negLogLike(parameters, xl2))
i <- i+1
}
#changing the value of gamma
gamma <- seq(0.25, 10, by = 0.25)
i <- 1
changingGamma <- vector("numeric", length = 40)
while(i<=40){
parameters <- c(0.5, 4115, gamma[[i]], 1)
changingGamma[i] <- (negLogLike(parameters, xl2))
i <- i+1
}
#changing the value of alpha
alpha <- seq(0.25, 10, by = 0.25)
i <- 1
changingAlpha <- vector("numeric", length = 40)
while(i<=40){
parameters <- c(0.5, 4115, 1, alpha[[i]])
changingAlpha[i] <- (negLogLike(parameters, xl2))
i <- i+1
}
par(mfrow = c(2,2))
plot(amplitude, changingA, type = "l", xlab = "Amplitude", ylab = "Negative Log Likelihood")
plot(mu, changingMu, type = "l", xlab = "Mu", ylab = "Negative Log Likelihood")
plot(gamma, changingGamma, type = "l", xlab = "Gamma", ylab = "Negative Log Likelihood")
plot(alpha, changingAlpha, type = "l", xlab = "Alpha", ylab = "Negative Log Likelihood")
MOFFATPDF <- function(parameters, x){
mu <- parameters[[1]]
alpha <- parameters[[2]]
beta <- parameters[[3]]
predictedDensity <- (gamma(beta)/(alpha*sqrt(pi)*gamma(beta-0.5)))*(1+((x-mu)/alpha)^2)^-beta
return(predictedDensity)
}
MOFFAT <- function(mu, alpha, beta, x){
gamma(beta)/(alpha*sqrt(pi)*gamma(beta-0.5))*(1+((x-mu)/alpha)^2)^-beta
}
#Function 1
mu1 <- 10
alpha1 <- 1.3
beta1 <- 4
String1 = paste("mu =", mu1, "alpha =", alpha1, "beta =", beta1)
#Function 2
mu2 <- -3
alpha2 <- 0.7
beta2 <- 6
String2 = paste("mu =", mu2, "alpha =", alpha2, "beta =", beta2)
#Function 3
mu3 <- 3.4
alpha3 <- 6.4
beta3 <- 2
String3 = paste("mu =", mu3, "alpha =", alpha3, "beta = ", beta3)
ggplot() +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu1, alpha = alpha1, beta = beta1), aes(colour = String1)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu2, alpha = alpha2, beta = beta2), aes(colour = String2)) +
stat_function(fun = MOFFAT, n = 1000, args = list(mu = mu3, alpha = alpha3, beta = beta3), aes(colour = String3)) +
xlab("x") + ylab("p(x)") +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Distributions", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("left"),
legend.margin = margin(6, 6, 6, 6))
NLL <- function(parameters, x){
predictedDensity <- MOFFATPDF(parameters, x)
return(-sum(log(predictedDensity)))
}
derivMOFFATPDF <- function(parameters, x){
mu <- parameters[[1]]
alpha <- parameters[[2]]
beta <- parameters[[3]]
dMu <- -sum((2*beta*(x-mu))/(alpha^2 + (x-mu)^2))
dAlpha <- -sum(-1/alpha + (2*beta*(x-mu)^2)/(alpha^3+alpha*(x-mu)^2))
dBeta <- -sum(digamma(beta)-digamma(beta-0.5)-log(1+(x-mu)^2/alpha^2))
return(c(dMu, dAlpha, dBeta))
}
xl2 <- line2$x
xl2.5 <- line2.5$x
xVall2 <- seq(min(xl2), max(xl2), length = 963)
xVall2.5 <- seq(min(xl2.5), max(xl2.5), length = 291)
initialGUESS <- c(mu = 4115, alpha = 1, beta = 4)
lowerBOUNDS <- c(0, 1e-6, 1.5)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDF, x = xl2.5, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2.5 <- RESULT$par
optimPAR2.5
View(binIAnorm)
par(mfrow = c(1,2))
qqplot(quantiles, sortNTL2,  xlab = "Moffat Distribution Theoretical Quantiles", ylab = "Data Quantiles")
ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5]) +
stat_function(fun = gaussian_density, args = list(parameters = optimized_parameters), n=1000, aes(colour="gaussian density"), linewidth=1.2) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("right"),
legend.margin = margin(6, 6, 6, 6))
library(ggplot2)
library(ggpointdensity)
library(viridis)
ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5]) +
stat_function(fun = gaussian_density, args = list(parameters = optimized_parameters), n=1000, aes(colour="gaussian density"), linewidth=1.2) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("right"),
legend.margin = margin(6, 6, 6, 6))
ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5]) +
stat_function(fun = gaussian_density, args = list(parameters = optimized_parameters), n=1000, aes(colour="Normal PDF"), linewidth=1.2) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette) +
theme(legend.position = "inside",
legend.justification = c("right"),
legend.margin = margin(6, 6, 6, 6))
