POI1 <- T5 %>%
filter(x>4160 & x<4180 & y>4180 & y<4200)
POI2 <- T5 %>%
filter(x>4105 & x< 4125 & y>4040 & y<4060)
ggplot(POI1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
ggplot(POI2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
line0 <- POI2 %>%
filter(y>4048.5 & y< 4049.5)
line1 <- POI2 %>%
filter(y>4049.5 & y< 4050.5)
line2 <- POI2 %>%
filter(y>4050.5 & y< 4051.5)
line3 <- POI2 %>%
filter(y>4051.5 & y< 4052.5)
line4 <- POI2 %>%
filter(y>4052.5 & y< 4053.5)
line5 <- POI2 %>%
filter(y>4053.5 & y< 4054.5)
line6 <- POI2 %>%
filter(y>4054.5 & y< 4055.5)
lineback <- POI2 %>%
filter(y>4055 & y< 4060)
line2.5 <- POI2 %>%
filter(y>4050.5 & y< 4051)
xl2 <- line2$x
# Define the Gaussian density function
gaussian_density <- function(parameters, x) {
mean <- parameters[[1]]
sd <- parameters[[2]]
return(dnorm(x, mean = mean, sd = sd))
}
# Define the negative log-likelihood function for Gaussian distribution
negative_log_likelihood <- function(parameters, x) {
predicted_density <- gaussian_density(parameters, x)
return(-sum(log(predicted_density)))
}
initial_guess <- c(mean = 4115, sd = 1)
# Optimize the negative log-likelihood function
result <- optim(par = initial_guess, fn = negative_log_likelihood, x = xl2, method = "Nelder-Mead")
# Extract the optimized parameters
optimized_parameters <- result$par
optimized_parameters
optimParameters2N <- gaussian_density(optimized_parameters, xl2)
## plotting layers in ggplot
ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5]) +
stat_function(fun = gaussian_density, args = list(parameters = optimized_parameters), n=1000, aes(colour="gaussian density"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
Moffat <- function(x, amplitude, mu, gamma, alpha){
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
#Function 1
A1 <- 4
mu1 <- 10
gamma1 <- 2
alpha1 <- 3.8
String1 = paste("A = ", A1, "mu = ", mu1, "gamma = ", gamma1, "alpha = ", alpha1)
#Function 2
A2 <- 6
mu2 <- -3
gamma2 <- 0.7
alpha2 <- 9
String2 = paste("A = ", A2, "mu = ", mu2, "gamma = ", gamma2, "alpha = ", alpha2)
#Function 3
A3 <- 2
mu3 <- 3.4
gamma3 <- 6.4
alpha3 <- 0.7
String3 = paste("A = ", A3, "mu = ", mu3, "gamma = ", gamma3, "alpha = ", alpha3)
ggplot() +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A1, mu = mu1, gamma = gamma1, alpha = alpha1), aes(colour = String1)) +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A2, mu = mu2, gamma = gamma2, alpha = alpha2), aes(colour = String2)) +
stat_function(fun = Moffat, n = 1000, args = list(amplitude = A3, mu = mu3, gamma = gamma3, alpha = alpha3), aes(colour = String3)) +
xlim(-20, 20) + ylim(0, NA) +
scale_colour_manual("Moffat Models", values = cbPalette)
Moffat <- function(parameters, x){
amplitude <- parameters[[1]]
mu <- parameters[[2]]
gamma <- parameters[[3]]
alpha <- parameters[[4]]
amplitude <- pmax(amplitude, 1e-6)
gamma <- pmax(gamma, 1e-6)
alpha <- pmax(alpha, 1e-6)
#limiting values, amplitude must be greater than 0. As I am creating a probability density function, the area under the curve sums to 1.
#gamma can't equal zero, otherwise there is a math error.
#alpha can't equal 0 otherwise the density will be equal to 1 for everything. It can't be less than zero as that'll cause the density to be greater than 1.
predictedDensity <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
negLogLike <- function(parameters, x){
predictedDens <- Moffat(parameters, x)
return(-sum(log(predictedDens)))
}
#changing the value of the amplitude
amplitude <- seq(0.25, 5, by = 0.25)
i <- 1
changingA <- vector("numeric", length = 20)
while(i<=20){
parameters <- c(amplitude[[i]], 4115, 1, 1)
changingA[i] <- (negLogLike(parameters, xl2))
i <- i+1
}
#changing the value of mu
mu <- seq(4110, 4120, by = 0.5)
i <- 1
changingMu <- vector("numeric", length = 21)
while(i<=21){
parameters <- c(0.5, mu[[i]], 1, 1)
changingMu[i] <- (negLogLike(parameters, xl2))
i <- i+1
}
#changing the value of gamma
gamma <- seq(0.25, 10, by = 0.25)
i <- 1
changingGamma <- vector("numeric", length = 40)
while(i<=40){
parameters <- c(0.5, 4115, gamma[[i]], 1)
changingGamma[i] <- (negLogLike(parameters, xl2))
i <- i+1
}
#changing the value of alpha
alpha <- seq(0.25, 10, by = 0.25)
i <- 1
changingAlpha <- vector("numeric", length = 40)
while(i<=40){
parameters <- c(0.5, 4115, 1, alpha[[i]])
changingAlpha[i] <- (negLogLike(parameters, xl2))
i <- i+1
}
par(mfrow = c(2,2))
plot(amplitude, changingA, type = "l", xlab = "Amplitude", ylab = "Negative Log Likelihood")
plot(mu, changingMu, type = "l", xlab = "Mu", ylab = "Negative Log Likelihood")
plot(gamma, changingGamma, type = "l", xlab = "Gamma", ylab = "Negative Log Likelihood")
plot(alpha, changingAlpha, type = "l", xlab = "Alpha", ylab = "Negative Log Likelihood")
MOFFATPDF <- function(parameters, x){
mu <- parameters[[1]]
alpha <- parameters[[2]]
beta <- parameters[[3]]
alpha <- pmax(alpha, 1e-6)
beta <- pmax(beta, 1.5)
predictedDensity <- (gamma(beta)/(alpha*sqrt(pi)*gamma(beta-0.5)))*(1+((x-mu)/alpha)^2)^-beta
return(predictedDensity)
}
NLL <- function(parameters, x){
predictedDensity <- MOFFATPDF(parameters, x)
return(-sum(log(predictedDensity)))
}
derivMOFFATPDF <- function(parameters, x){
mu <- parameters[[1]]
alpha <- parameters[[2]]
beta <- parameters[[3]]
dMu <- -sum((2*beta*(x-mu))/(alpha^2 + (x-mu)^2))
dAlpha <- -sum(-1/alpha + (2*beta*(x-mu)^2)/(alpha^3+alpha*(x-mu)^2))
dBeta <- -sum(digamma(beta)-digamma(beta-0.5)-log(1+(x-mu)^2/alpha^2))
return(c(dMu, dAlpha, dBeta))
}
xl2 <- line2$x
xl2.5 <- line2.5$x
xVall2 <- seq(min(xl2), max(xl2), length = 963)
xVall2.5 <- seq(min(xl2.5), max(xl2.5), length = 291)
initialGUESS <- c(mu = 4115, alpha = 1, beta = 4)
lowerBOUNDS <- c(0, 1e-6, 1.5)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDF, x = xl2.5, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2.5 <- RESULT$par
optimPAR2.5
optimDENS2.5 <- MOFFATPDF(optimPAR2.5, xVall2.5)
## plotting layers in ggplot
ggplot(line2.5) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2.5), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDF, x = xl2, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2 <- RESULT$par
optimPAR2
optimDENS2 <- MOFFATPDF(optimPAR2, xVall2)
## plotting layers in ggplot
ggplot(line2) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5]) +
stat_function(fun = gaussian_density, args = list(parameters = optimized_parameters), n=1000, aes(colour="gaussian density"), linewidth=1.2) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
ks.test(x = line2$x, y = "pnorm")
noTiesL2 <- unique(xl2)
ks.test(x = noTiesL2, y = "pnorm")
plot(ecdf(noTiesL2), main = "KS Test - Normal Distribution", ylab = "Probability")
curve(pnorm(x, mean = 4115.19535, sd = 1.20138), add = TRUE, col = 4)
xRange <- seq(4105, 4125, length = 100)
integrate(MOFFATPDF, lower = min(xRange), upper = max(xRange), parameters = optimPAR2)
i <- 1
MOFFATCDF <- vector("numeric", length = 100)
while(i<= 100){
MOFFATCDF[i] <- integrate(MOFFATPDF, lower = xRange[[1]], upper = xRange[[i]], parameters = optimPAR2)
i <- i + 1
}
CDF <- cbind(xRange, MOFFATCDF)
par(mfrow = c(1,2))
plot(ecdf(noTiesL2), main = "KS Test - Moffat Distribution", ylab = "Probability", col = rgb(0,0,1, alpha = 0.5))
lines(CDF$xRange, CDF$MOFFATCDF, type = "l", col = cbPalette[7])
plot(CDF, type = "l", ylab = "Probability")
xRange <- seq(4105, 4125, length = 100)
xRange[1]
xRange[[1]]
xRange <- seq(4105, 4125, length = 100)
integrate(MOFFATPDF, lower = min(xRange), upper = max(xRange), parameters = optimPAR2)
i <- 1
MOFFATCDF <- vector("numeric", length = 100)
for (i in 1:100) {
MOFFATCDF[i] <- integrate(MOFFATPDF, lower = xRange[1], upper = xRange[i], parameters = optimPAR2)
}
MOFFATCDF[i] <- integrate(MOFFATPDF, lower = xRange[1], upper = xRange[i], parameters = optimPAR2)
integrate(MOFFATPDF, lower = xRange[1], upper = xRange[10], parameters = optimPAR2)
class(integrate(MOFFATPDF, lower = xRange[1], upper = xRange[10], parameters = optimPAR2))
xRange <- seq(4105, 4125, length = 100)
integrate(MOFFATPDF, lower = min(xRange), upper = max(xRange), parameters = optimPAR2)
i <- 1
MOFFATCDF <- vector("numeric", length = 100)
for (i in 1:100) {
MOFFATCDF[i] <- integrate(MOFFATPDF, lower = xRange[1], upper = xRange[i], parameters = optimPAR2)
}
integrate(MOFFATPDF, lower = xRange[1], upper = xRange[10], parameters = optimPAR2)[1]
xRange <- seq(4105, 4125, length = 100)
integrate(MOFFATPDF, lower = min(xRange), upper = max(xRange), parameters = optimPAR2)
i <- 1
MOFFATCDF <- vector("numeric", length = 100)
for (i in 1:100) {
MOFFATCDF[i] <- integrate(MOFFATPDF, lower = xRange[1], upper = xRange[i], parameters = optimPAR2)$value
}
CDF <- cbind(xRange, MOFFATCDF)
par(mfrow = c(1,2))
plot(ecdf(noTiesL2), main = "KS Test - Moffat Distribution", ylab = "Probability", col = rgb(0,0,1, alpha = 0.5))
lines(CDF$xRange, CDF$MOFFATCDF, type = "l", col = cbPalette[7])
View(CDF)
CDF <- cbind(xRange, MOFFATCDF)
par(mfrow = c(1,2))
plot(ecdf(noTiesL2), main = "KS Test - Moffat Distribution", ylab = "Probability", col = rgb(0,0,1, alpha = 0.5))
lines(CDF[,1], CDF[,2], type = "l", col = cbPalette[7])
plot(CDF, type = "l", ylab = "Probability")
CDF <- cbind(xRange, MOFFATCDF)
par(mfrow = c(1,2))
plot(ecdf(noTiesL2), main = "KS Test - Moffat Distribution", ylab = "Probability", col = rgb(0,0,1, alpha = 0.5))
lines(CDF[,1], CDF[,2], type = "l", col = cbPalette[7])
CDF <- cbind(xRange, MOFFATCDF)
plot(ecdf(noTiesL2), main = "KS Test - Moffat Distribution", ylab = "Probability", col = rgb(0,0,1, alpha = 0.5))
lines(CDF[,1], CDF[,2], type = "l", col = cbPalette[7])
CDF <- cbind(xRange, MOFFATCDF)
plot(ecdf(noTiesL2), main = "KS Test - Moffat Distribution", ylab = "Probability", col = rgb(0,0,1, alpha = 0.1))
lines(CDF[,1], CDF[,2], type = "l", col = cbPalette[7])
CDF <- cbind(xRange, MOFFATCDF)
plot(ecdf(noTiesL2), main = "KS Test - Moffat Distribution", ylab = "Probability", col = rgb(0,0,1, alpha = 0.1))
lines(CDF[,1], CDF[,2], type = "l", col = cbPalette[7], lwd = 2)
numericMCDF <- unlist(MOFFATCDF)
ks.test(x = noTiesL2, y = numericMCDF)
ks.test(x = noTiesL2, y = MOFFATCDF)
xRange <- seq(4160, 4180, length = 100)
yRange <- seq(4180, 4200, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimPOI1Par[[4]]-1)/(pi*optimPOI1Par[[3]]^2)
parameters <- c(amplitude, optimPOI1Par)
zPOI1<- Moffat2D(grid, parameters)
zPOI1Matrix <- matrix(zPOI1, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zPOI1Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
model <- ggplot(POI1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zPOI1), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
library(ggExtra)
xRange <- seq(4160, 4180, length = 100)
yRange <- seq(4180, 4200, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimPOI1Par[[4]]-1)/(pi*optimPOI1Par[[3]]^2)
parameters <- c(amplitude, optimPOI1Par)
zPOI1<- Moffat2D(grid, parameters)
zPOI1Matrix <- matrix(zPOI1, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zPOI1Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
model <- ggplot(POI1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zPOI1), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
#refiltering the POI1
POI1ZOOM <- POI1 %>%
filter(x>4167 & x<4177 & y>4183 & y<4193)
#creating a point density plot
modelZoomedInPOI1 <- ggplot(POI1ZOOM, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contourData <- ggplot_build(contours)$data[[1]]
#combining the contour plot and the point density plot
combined <- modelZoomedInPOI1 + geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[5], alpha = 1, linewidth= 0.3)
#viewing
ggMarginal(combined, type = "histogram")
#plotting contours on the raw data
ggplot(POI1ZOOM, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
initGuess <- c(x0 = 4115.227, y0 = 4052.706, alpha = 1, beta = 2)
result2D <- optim(par = initGuess, fn = NLL2D, gr = deriv2DNLL, x = POI2$x, y = POI2$y, method = "L-BFGS-B", lower = lowerBounds)
result2D
optimPOI2Par <- result2D$par
optimPOI2Par
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4045, 4055, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimPOI2Par[[4]]-1)/(pi*optimPOI2Par[[3]]^2)
parameters <- c(amplitude, optimPOI2Par)
zPOI2<- Moffat2D(grid, parameters)
zPOI2Matrix <- matrix(zPOI2, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zPOI2Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4045, 4055, length = 100)
data <- expand.grid(x = xRange, y = yRange)
model <- ggplot(POI2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contours <- ggplot(data, aes(x = x, y = y)) +
stat_contour(aes(z = zPOI2), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
#refiltering the POI2
POI2ZOOM <- POI2 %>%
filter(x>4110 & x<4120 & y>4048 & y<4058)
#creating a point density plot
modelZoomedInPOI2 <- ggplot(POI2ZOOM, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contourData <- ggplot_build(contours)$data[[1]]
#combining the contour plot and the point density plot
combined <- modelZoomedInPOI2 + geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[5], alpha = 1, linewidth= 0.3)
#viewing
ggMarginal(combined, type = "histogram")
#plotting contours on the raw data
ggplot(POI2ZOOM, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
celestialSource1 <- T5 %>%
filter(x>4030 & x<4050 & y>4060 & y<4080)
celestialSource2 <- T5 %>%
filter(x>4070 & x<4080 & y>4100 & y<4110)
celestialSource3 <- T5 %>%
filter(x>4070 & x<4080 & y>4150 & y<4160)
ggplot(celestialSource1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(5, 25, 125)) +
coord_fixed()
ggplot(celestialSource2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(5, 25, 125)) +
coord_fixed()
ggplot(celestialSource3, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(5, 25, 125)) +
coord_fixed()
initGuess <- c(x0 = 4039.865, y0 = 4071.066, alpha = 1, beta = 2)
lowerBounds <- c(0, 0, 1e-6, 1+1e-6)
result2D <- optim(par = initGuess, fn = NLL2D, gr = deriv2DNLL, x = celestialSource1$x, y = celestialSource1$y, method = "L-BFGS-B", lower = lowerBounds)
optimCS1Par <- result2D$par
optimCS1Par
xRange <- seq(4030, 4050, length = 100)
yRange <- seq(4060, 4080, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimCS1Par[[4]]-1)/(pi*optimCS1Par[[3]]^2)
parameters <- c(amplitude, optimCS1Par)
zCS1<- Moffat2D(grid, parameters)
zCS1Matrix <- matrix(zCS1, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zCS1Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
xRange <- seq(4030, 4050, length = 100)
yRange <- seq(4060, 4080, length = 100)
datac1 <- expand.grid(x = xRange, y = yRange)
model <- ggplot(celestialSource1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
contours <- ggplot(datac1, aes(x = x, y = y)) +
stat_contour(aes(z = zCS1), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
#refiltering Celestial Source 1
CS1ZOOM <- celestialSource1 %>%
filter(x>4035 & x<4045 & y>4070 & y<4080)
#creating a point density plot
modelZoomedInCS1 <- ggplot(CS1ZOOM, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contourData <- ggplot_build(contours)$data[[1]]
#combining the contour plot and the point density plot
combined <- modelZoomedInCS1 + geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[5], alpha = 1, linewidth= 0.3)
#viewing
ggMarginal(combined, type = "histogram")
#plotting contours on the raw data
ggplot(CS1ZOOM, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
initGuess <- c(x0 = 4073.925, y0 = 4105.563, alpha = 1, beta = 2)
lowerBounds <- c(0, 0, 1e-6, 1+1e-6)
result2D <- optim(par = initGuess, fn = NLL2D, gr = deriv2DNLL, x = celestialSource2$x, y = celestialSource2$y, method = "L-BFGS-B", lower = lowerBounds)
optimCS2Par <- result2D$par
optimCS2Par
xRange <- seq(4070, 4080, length = 100)
yRange <- seq(4100, 4110, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimCS2Par[[4]]-1)/(pi*optimCS1Par[[3]]^2)
parameters <- c(amplitude, optimCS2Par)
zCS2<- Moffat2D(grid, parameters)
zCS2Matrix <- matrix(zCS2, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zCS2Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
xRange <- seq(4070, 4080, length = 100)
yRange <- seq(4100, 4110, length = 100)
datacs2 <- expand.grid(x = xRange, y = yRange)
model <- ggplot(celestialSource2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(5, 25, 125)) +
coord_fixed()
contours <- ggplot(datacs2, aes(x = x, y = y)) +
stat_contour(aes(z = zCS2), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
#plotting contours on the raw data
ggplot(celestialSource2, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
initGuess <- c(x0 = 4074.631, y0 = 4156.233, alpha = 1, beta = 2)
lowerBounds <- c(0, 0, 1e-6, 1+1e-6)
result2D <- optim(par = initGuess, fn = NLL2D, gr = deriv2DNLL, x = celestialSource3$x, y = celestialSource3$y, method = "L-BFGS-B", lower = lowerBounds)
optimCS3Par <- result2D$par
optimCS3Par
xRange <- seq(4070, 4080, length = 100)
yRange <- seq(4150, 4160, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimCS3Par[[4]]-1)/(pi*optimCS1Par[[3]]^2)
parameters <- c(amplitude, optimCS3Par)
zCS3<- Moffat2D(grid, parameters)
zCS3Matrix <- matrix(zCS3, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zCS3Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
xRange <- seq(4070, 4080, length = 100)
yRange <- seq(4150, 4160, length = 100)
datac1 <- expand.grid(x = xRange, y = yRange)
model <- ggplot(celestialSource3, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(5, 25, 125)) +
coord_fixed()
contours <- ggplot(datac1, aes(x = x, y = y)) +
stat_contour(aes(z = zCS3), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
#viewing
ggMarginal(combined, type = "histogram")
#plotting contours on the raw data
ggplot(celestialSource3, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
#viewing
ggMarginal(combined, type = "histogram")
#plotting contours on the raw data
ggplot(celestialSource3, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
