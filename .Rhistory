d_A = sum((1 + (x - mu)^2 / gamma^2)^(-alpha))
d_mu = 2*sum(amplitude*alpha*(x - mu)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^2))
d_gamma = 2*sum(amplitude*alpha*((x - mu)^2)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^3))
d_alpha = -sum(amplitude*(1 + (x - mu)^2 / gamma^2)^(-alpha)*log((1 + (x - mu)^2 / gamma^2)))
return(c(d_A, d_mu, d_gamma, d_alpha))
}
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 2, gamma = 1, alpha = 1)
#set bounds
lowerBounds <- c(1e-6, -Inf, 1e-6, 1e-6)
upperBounds <- c(Inf, Inf, Inf, Inf)
#Optimise
#Method 1
result <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "Nelder-Mead")
optimPar <- result$par
print(optimPar)
res <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "L-BFGS-B", lower = lowerBounds)
print(res$par)
#Method 2
result2 <- optim(par = initialGuess, fn = Moffat1D, gr = MoffatDeriv, x = sampleData, method = "L-BFGS-B", lower = lowerBounds)
optimPar2 <- result2$par
print(optimPar2)
#used for plotting and negative log likelihood
MoffatNS <- function(parameters, x){
amplitude <- parameters[[1]]
mu <- parameters[[2]]
gamma <- parameters[[3]]
alpha <- parameters[[4]]
amplitude <- pmax(amplitude, 1e-6)
gamma <- pmax(gamma, 1e-6)
alpha <- pmax(alpha, 1e-6)
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
# MoffatNS <- function(amplitude, mu, gamma, alpha, x){
#
#   amplitude <- pmax(amplitude, 1e-6)
#   gamma <- pmax(gamma, 1e-6)
#   alpha <- pmax(alpha, 1e-6)
#
#   amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
# }
#method 1 - NLL
# negLogLike <- function(parameters, x){
#   amplitude <- parameters[1]
#     amplitude <- pmax(amplitude, 1e-6)
#   mu <- parameters[2]
#   gamma <- parameters[3]
#     gamma <- pmax(gamma, 1e-6)
#   alpha <- parameters[4]
#     alpha <- pmax(alpha, 1e-6)
#     #check boundary conditions
#   if(amplitude <= 0 || gamma <= 0 || alpha <= 0){
#     stop("Parameters must be greater than 0")
#   }
#   predictedDens <- MoffatNS(parameters, x)
#   return(-sum(log(predictedDens)))
# }
# negLogLike <- function(amplitude, mu, gamma, alpha, x){
#   predictedDens <- MoffatNS(amplitude, mu, gamma, alpha, x)
#   return(-sum(log(predictedDens)))
# }
negLogLike <- function(parameters, x){
amplitude <- parameters[[1]]
mu <- parameters[[2]]
gamma <- parameters[[3]]
alpha <- parameters[[4]]
#check boundary conditions
predictedDens <- MoffatNS(parameters, x)
return(-sum(log(predictedDens)))
}
#Method 2 - MLE
Moffat1D <- function(parameters, x){
amplitude <- parameters[[1]]
mu <- parameters[[2]]
gamma <- parameters[[3]]
alpha <- parameters[[4]]
predicted <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
return(sum(predicted))
}
MoffatDeriv <- function(parameters, x){
parameters[[1]] <- pmax(parameters[[1]], 1e-6)
amplitude <- parameters[[1]]
mu <- parameters[[2]]
parameters[[3]] <- pmax(parameters[[3]], 1e-6)
gamma <- parameters[[3]]
parameters[[4]] <- pmax(parameters[[4]], 1e-6)
alpha <- parameters[[4]]
d_A = sum((1 + (x - mu)^2 / gamma^2)^(-alpha))
d_mu = 2*sum(amplitude*alpha*(x - mu)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^2))
d_gamma = 2*sum(amplitude*alpha*((x - mu)^2)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^3))
d_alpha = -sum(amplitude*(1 + (x - mu)^2 / gamma^2)^(-alpha)*log((1 + (x - mu)^2 / gamma^2)))
return(c(d_A, d_mu, d_gamma, d_alpha))
}
#set initial guesses
initialGuess <- c(amplitude = 100, mu = 2, gamma = 1, alpha = 1)
#set bounds
lowerBounds <- c(1e-6, -Inf, 1e-6, 1e-6)
upperBounds <- c(Inf, Inf, Inf, Inf)
#Optimise
#Method 1
result <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "Nelder-Mead")
optimPar <- result$par
print(optimPar)
res <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "L-BFGS-B", lower = lowerBounds)
print(res$par)
#Method 2
result2 <- optim(par = initialGuess, fn = Moffat1D, gr = MoffatDeriv, x = sampleData, method = "L-BFGS-B", lower = lowerBounds)
optimPar2 <- result2$par
print(optimPar2)
#code checking
ensure_positive <- function(x) {
if(x<= 0){
return(1e-6)
} else {
return(x)
}
}
MoffatNS <- function(x, amplitude, mu, gamma, alpha){
amplitude <- pmax(amplitude, 1e-6)
gamma <- pmax(gamma, 1e-6)
alpha <- pmax(alpha, 1e-6)
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
negLogLike <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
#check boundary conditions
predictedDens <- MoffatNS(parameters, x)
return(-sum(log(predictedDens)))
}
initialGuess <- c(0.4,1,5,2)
sample <- c(0.7, 1, 1.4)
MoffatNS(sample, initialGuess)
#plot time
xVal <- seq(min(sampleData), max(sampleData), length = 1000)
optimisedDens <- MoffatNS(optimPar, xVal)
MoffatNS <- function(parameters, x){
amplitude <- parameters[[1]]
mu <- parameters[[2]]
gamma <- parameters[[3]]
alpha <- parameters[[4]]
amplitude <- pmax(amplitude, 1e-6)
gamma <- pmax(gamma, 1e-6)
alpha <- pmax(alpha, 1e-6)
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
#plot time
xVal <- seq(min(sampleData), max(sampleData), length = 1000)
optimisedDens <- MoffatNS(optimPar, xVal)
optDens2 <- MoffatNS(optimPar2, xVal)
plot(sampleData)
plot(xValN, optimisedDensN, type = "l", main = "Optimised Density Function (Gaussian)", xlab = "x", ylab = "Density")
plot(xVal, optimisedDens, type = "l", main = "Optimised Density Function (Moffat, NLL)", xlab = "x", ylab = "Density")
plot(xVal, optDens2, type = "l", main = "Optimised Density Function (Moffat, grad)", xlab = "x", ylab = "Density")
#Fitting to data
xVall2 <- seq(min(xl2), max(xl2), length = 963)
#plot time
xVal <- seq(min(sampleData), max(sampleData), length = 1000)
optimisedDens <- MoffatNS(optimPar, xVal)
optDens2 <- MoffatNS(optimPar2, xVal)
plot(sampleData)
plot(xValN, optimisedDensN, type = "l", main = "Optimised Density Function (Gaussian)", xlab = "x", ylab = "Density")
plot(xVal, optimisedDens, type = "l", main = "Optimised Density Function (Moffat, NLL)", xlab = "x", ylab = "Density")
plot(xVal, optDens2, type = "l", main = "Optimised Density Function (Moffat, grad)", xlab = "x", ylab = "Density")
#data to fit to
line2 <- POI2 %>%
filter(y>4050.5 & y< 4051.5)
plotdist(line2$x)
plot(line2)
xl2 <- line2$x
plot(xl2)
line2.5 <- line2 %>%
filter(y>4050.5 & y< 4051)
plot(line2.5)
xl2.5 <- line2.5$x
plot(xl2.5)
#Fitting to data
xVall2 <- seq(min(xl2), max(xl2), length = 963)
plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 0.4, mu = 4115, gamma = 0.5, alpha = 0.4)
#Method 1
#l2m1 = line 2 (slice of celestial source), method 1 (negative log likelihood)
resultl2m1 <- optim(par = initialGuess, fn = negLogLike, x = xl2, method = "Nelder-Mead")
optimParl2m1 <- resultl2m1$par
print(optimParl2m1)
optDenl2m1 <- MoffatNS(optimParl2m1, xVall2)
#Method 2
#l2m2 = line 2 (slice of celestial source), method 2 (mle)
resultl2m2 <- optim(par = initialGuess, fn = Moffat1D, gr = MoffatDeriv, x = xl2, lower = lowerBounds, method = "L-BFGS-B")
optimParl2m2 <- resultl2m2$par
print(optimParl2m2)
optDenl2m2<- MoffatNS(optimParl2m2, xVall2)
#plot
par(mfrow = c(1,2))
plot(xVall2, optDenl2m1, type = "l", main = "Optimised Density Function (NLL)", xlab = "x", ylab = "Density")
plot(xVall2, optDenl2m2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
par(mfrow = c(1,3))
plot(xl2)
plot(MoffatNS(optimParl2m1, xl2))
plot(MoffatNS(optimParl2m2, xl2))
#Fitting to data
xVall2 <- seq(min(xl2), max(xl2), length = 963)
plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 0.4, mu = 4115, gamma = 10, alpha = 0.4)
#Method 1
#l2m1 = line 2 (slice of celestial source), method 1 (negative log likelihood)
resultl2m1 <- optim(par = initialGuess, fn = negLogLike, x = xl2, method = "Nelder-Mead")
optimParl2m1 <- resultl2m1$par
print(optimParl2m1)
optDenl2m1 <- MoffatNS(optimParl2m1, xVall2)
#Method 2
#l2m2 = line 2 (slice of celestial source), method 2 (mle)
resultl2m2 <- optim(par = initialGuess, fn = Moffat1D, gr = MoffatDeriv, x = xl2, lower = lowerBounds, method = "L-BFGS-B")
optimParl2m2 <- resultl2m2$par
print(optimParl2m2)
optDenl2m2<- MoffatNS(optimParl2m2, xVall2)
#plot
par(mfrow = c(1,2))
plot(xVall2, optDenl2m1, type = "l", main = "Optimised Density Function (NLL)", xlab = "x", ylab = "Density")
plot(xVall2, optDenl2m2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
par(mfrow = c(1,3))
plot(xl2)
plot(MoffatNS(optimParl2m1, xl2))
plot(MoffatNS(optimParl2m2, xl2))
#Fitting to data
xVall2 <- seq(min(xl2), max(xl2), length = 963)
plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 4115, gamma = 10, alpha = 0.4)
#Method 1
#l2m1 = line 2 (slice of celestial source), method 1 (negative log likelihood)
resultl2m1 <- optim(par = initialGuess, fn = negLogLike, x = xl2, method = "Nelder-Mead")
optimParl2m1 <- resultl2m1$par
print(optimParl2m1)
optDenl2m1 <- MoffatNS(optimParl2m1, xVall2)
#Method 2
#l2m2 = line 2 (slice of celestial source), method 2 (mle)
resultl2m2 <- optim(par = initialGuess, fn = Moffat1D, gr = MoffatDeriv, x = xl2, lower = lowerBounds, method = "L-BFGS-B")
optimParl2m2 <- resultl2m2$par
print(optimParl2m2)
optDenl2m2<- MoffatNS(optimParl2m2, xVall2)
#plot
par(mfrow = c(1,2))
plot(xVall2, optDenl2m1, type = "l", main = "Optimised Density Function (NLL)", xlab = "x", ylab = "Density")
plot(xVall2, optDenl2m2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
par(mfrow = c(1,3))
plot(xl2)
plot(MoffatNS(optimParl2m1, xl2))
plot(MoffatNS(optimParl2m2, xl2))
#Fitting to data
xVall2 <- seq(min(xl2), max(xl2), length = 963)
plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 4115, gamma = 100, alpha = 0.4)
#Method 1
#l2m1 = line 2 (slice of celestial source), method 1 (negative log likelihood)
resultl2m1 <- optim(par = initialGuess, fn = negLogLike, x = xl2, method = "Nelder-Mead")
optimParl2m1 <- resultl2m1$par
print(optimParl2m1)
optDenl2m1 <- MoffatNS(optimParl2m1, xVall2)
#Method 2
#l2m2 = line 2 (slice of celestial source), method 2 (mle)
resultl2m2 <- optim(par = initialGuess, fn = Moffat1D, gr = MoffatDeriv, x = xl2, lower = lowerBounds, method = "L-BFGS-B")
optimParl2m2 <- resultl2m2$par
print(optimParl2m2)
optDenl2m2<- MoffatNS(optimParl2m2, xVall2)
#plot
par(mfrow = c(1,2))
plot(xVall2, optDenl2m1, type = "l", main = "Optimised Density Function (NLL)", xlab = "x", ylab = "Density")
plot(xVall2, optDenl2m2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
par(mfrow = c(1,3))
plot(xl2)
plot(MoffatNS(optimParl2m1, xl2))
plot(MoffatNS(optimParl2m2, xl2))
#Fitting to data
xVall2 <- seq(min(xl2), max(xl2), length = 963)
plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 4115, gamma = 10000, alpha = 0.4)
#Method 1
#l2m1 = line 2 (slice of celestial source), method 1 (negative log likelihood)
resultl2m1 <- optim(par = initialGuess, fn = negLogLike, x = xl2, method = "Nelder-Mead")
optimParl2m1 <- resultl2m1$par
print(optimParl2m1)
optDenl2m1 <- MoffatNS(optimParl2m1, xVall2)
#Method 2
#l2m2 = line 2 (slice of celestial source), method 2 (mle)
resultl2m2 <- optim(par = initialGuess, fn = Moffat1D, gr = MoffatDeriv, x = xl2, lower = lowerBounds, method = "L-BFGS-B")
optimParl2m2 <- resultl2m2$par
print(optimParl2m2)
optDenl2m2<- MoffatNS(optimParl2m2, xVall2)
#plot
par(mfrow = c(1,2))
plot(xVall2, optDenl2m1, type = "l", main = "Optimised Density Function (NLL)", xlab = "x", ylab = "Density")
plot(xVall2, optDenl2m2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
par(mfrow = c(1,3))
plot(xl2)
plot(MoffatNS(optimParl2m1, xl2))
plot(MoffatNS(optimParl2m2, xl2))
#Fitting to data
xVall2 <- seq(min(xl2), max(xl2), length = 963)
plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 4115, gamma = 1, alpha = 0.4)
#Method 1
#l2m1 = line 2 (slice of celestial source), method 1 (negative log likelihood)
resultl2m1 <- optim(par = initialGuess, fn = negLogLike, x = xl2, method = "Nelder-Mead")
optimParl2m1 <- resultl2m1$par
print(optimParl2m1)
optDenl2m1 <- MoffatNS(optimParl2m1, xVall2)
#Method 2
#l2m2 = line 2 (slice of celestial source), method 2 (mle)
resultl2m2 <- optim(par = initialGuess, fn = Moffat1D, gr = MoffatDeriv, x = xl2, lower = lowerBounds, method = "L-BFGS-B")
optimParl2m2 <- resultl2m2$par
print(optimParl2m2)
optDenl2m2<- MoffatNS(optimParl2m2, xVall2)
#plot
par(mfrow = c(1,2))
plot(xVall2, optDenl2m1, type = "l", main = "Optimised Density Function (NLL)", xlab = "x", ylab = "Density")
plot(xVall2, optDenl2m2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
par(mfrow = c(1,3))
plot(xl2)
plot(MoffatNS(optimParl2m1, xl2))
plot(MoffatNS(optimParl2m2, xl2))
#Fitting to data
xVall2 <- seq(min(xl2), max(xl2), length = 963)
plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 4115, gamma = 0.1, alpha = 0.4)
#Method 1
#l2m1 = line 2 (slice of celestial source), method 1 (negative log likelihood)
resultl2m1 <- optim(par = initialGuess, fn = negLogLike, x = xl2, method = "Nelder-Mead")
optimParl2m1 <- resultl2m1$par
print(optimParl2m1)
optDenl2m1 <- MoffatNS(optimParl2m1, xVall2)
#Method 2
#l2m2 = line 2 (slice of celestial source), method 2 (mle)
resultl2m2 <- optim(par = initialGuess, fn = Moffat1D, gr = MoffatDeriv, x = xl2, lower = lowerBounds, method = "L-BFGS-B")
optimParl2m2 <- resultl2m2$par
print(optimParl2m2)
optDenl2m2<- MoffatNS(optimParl2m2, xVall2)
#plot
par(mfrow = c(1,2))
plot(xVall2, optDenl2m1, type = "l", main = "Optimised Density Function (NLL)", xlab = "x", ylab = "Density")
plot(xVall2, optDenl2m2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
par(mfrow = c(1,3))
plot(xl2)
plot(MoffatNS(optimParl2m1, xl2))
plot(MoffatNS(optimParl2m2, xl2))
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(readr)
library(ggpointdensity)
library(viridis)
library(tidyr)
library(fitdistrplus)
library(ggplot2)
library(plotly)
library(readr)
library(ggpointdensity)
library(viridis)
library(tidyr)
library(fitdistrplus)
library(here)
i_am("MoffatPDF.Rmd")
Tz5 <- readr::read_csv(here("Data", "Terzan 5 X-ray events.csv"), col_types = list(.default = readr::col_guess()), )
head(Tz5)
T5 <- data.frame(Tz5$x, Tz5$y)
colnames(T5) <- c('x','y')
POI1 <- T5 %>%
filter(x>4160 & x<4180 & y>4180 & y<4200)
POI2 <- T5 %>%
filter(x>4105 & x< 4125 & y>4040 & y<4060)
#data to fit to
line2 <- POI2 %>%
filter(y>4050.5 & y< 4051.5)
plotdist(line2$x)
plot(line2)
line2.5 <- line2 %>%
filter(y>4050.5 & y< 4051)
plot(line2.5)
xl2 <- line2$x
xl2.5 <- line2.5$x
xVall2 <- seq(min(xl2), max(xl2), length = 963)
xVall2.5 <- seq(min(xl2.5), max(xl2.5), length = 291)
MOFFATPDF <- function(parameters, x){
mu <- parameters[[1]]
alpha <- parameters[[2]]
beta <- parameters[[3]]
alpha <- pmax(alpha, 1e-6)
beta <- pmax(beta, 0.5+1e-6)
predictedDensity <- (gamma(beta)/(alpha*sqrt(pi)*gamma(beta-0.5)))*(1+((x-mu)/alpha)^2)^-beta
return(predictedDensity)
}
NLL <- function(parameters, x){
predictedDensity <- MOFFATPDF(parameters, x)
return(-sum(log(predictedDensity)))
}
derivMOFFATPDS <- function(parameters, x){
mu <- parameters[[1]]
alpha <- parameters[[2]]
beta <- parameters[[3]]
dMu <- -sum((2*beta*(x-mu))/(alpha^2 + (x-mu)^2))
dAlpha <- -sum(-1/alpha + (2*beta*(x-mu)^2)/(alpha^3+alpha*(x-mu)^2))
dBeta <- -sum(digamma(beta)-digamma(beta-0.5)-log(1+(x-mu)^2/alpha^2))
return(c(dMu, dAlpha, dBeta))
}
initialGUESS <- c(mu = 4115, alpha = 1, beta = 4)
lowerBOUNDS <- c(0, 1e-6, 1.5)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDS, x = xl2.5, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2.5 <- RESULT$par
optimPAR2.5
optimDENS2.5 <- MOFFATPDF(optimPAR2.5, xVall2.5)
plot(xVall2.5, optimDENS2.5, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDS, x = xl2, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2 <- RESULT$par
optimPAR2
optimDENS2 <- MOFFATPDF(optimPAR2, xVall2)
plot(xVall2, optimDENS2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
## Color pallete
cbPalette <- c("#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
## plotting layers in ggplot
ggplot(POI2) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
## Color pallete
cbPalette <- c("#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
optimDENS2.5 <- MOFFATPDF(optimPAR2.5, xVall2.5)
## plotting layers in ggplot
ggplot(POI2.5) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
## Color pallete
cbPalette <- c("#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
optimDENS2.5 <- MOFFATPDF(optimPAR2.5, xVall2.5)
## plotting layers in ggplot
ggplot(line2.5) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDS, x = xl2, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2 <- RESULT$par
optimPAR2
optimDENS2 <- MOFFATPDF(optimPAR2, xVall2)
hist(line2)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDS, x = xl2, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2 <- RESULT$par
optimPAR2
optimDENS2 <- MOFFATPDF(optimPAR2, xVall2)
hist(xVall2)
line(xVall2, optimDENS2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density"))
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDS, x = xl2, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2 <- RESULT$par
optimPAR2
optimDENS2 <- MOFFATPDF(optimPAR2, xVall2)
hist(xVall2)
line(xVall2, optimDENS2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDS, x = xl2, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2 <- RESULT$par
optimPAR2
optimDENS2 <- MOFFATPDF(optimPAR2, xVall2)
hist(xVall2)
line(xVall2, optimDENS2)
## Color pallete
cbPalette <- c("#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
optimDENS2.5 <- MOFFATPDF(optimPAR2.5, xVall2.5)
## plotting layers in ggplot
ggplot(line2.5) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDS, x = xl2, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2 <- RESULT$par
optimPAR2
optimDENS2 <- MOFFATPDF(optimPAR2, xVall2)
plot(xVall2, optimDENS2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
optimDENS2 <- MOFFATPDF(optimPAR2, xVall2)
## plotting layers in ggplot
ggplot(line2) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
## Color pallete
cbPalette <- c("#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
optimDENS2.5 <- MOFFATPDF(optimPAR2.5, xVall2.5)
## plotting layers in ggplot
ggplot(line2.5) +
geom_histogram(aes(x, y=after_stat(density), colour="data"),bins=50,fill=cbPalette[5]) +
stat_function(fun=MOFFATPDF,args = list(parameters = optimPAR2.5), n=1000, aes(colour="Moffat PDF"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
initialGUESS <- c(mu = 4115, alpha = 1, beta = 4)
lowerBOUNDS <- c(0, 1e-6, 1.5)
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDS, x = xl2.5, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2.5 <- RESULT$par
optimPAR2.5
RESULT <- optim(par = initialGUESS, fn = NLL, gr = derivMOFFATPDS, x = xl2, method = "L-BFGS-B", lower = lowerBOUNDS)
optimPAR2 <- RESULT$par
optimPAR2
