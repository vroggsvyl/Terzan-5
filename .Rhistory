ggplot_build(binIAnorm)$data[[1]]
binIA <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1)) +
coord_fixed()
binIA
binIAnorm <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1), aes(weight = nrow(interestArea))) +
coord_fixed()
binIAnorm
ggplot_build(binIAnorm)$data[[1]]
sum(ggplot_build(binIAnorm)$data[[1]]$density)
binIA <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1)) +
coord_fixed()
binIA
binIAnorm <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1), aes(weight = nrow(interestArea))) +
coord_fixed()
binIAnorm
ggplot_build(binIAnorm)$data[[1]]
sum(ggplot_build(binIAnorm)$data[[1]]$density)
sum(ggplot_build(binIAnorm)$data[[1]]$ndensity)
binIA <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1)) +
coord_fixed()
binIA
binIAnorm <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1), aes(weight = nrow(interestArea))) +
coord_fixed()
binIAnorm
ggplot_build(binIAnorm)$data[[1]]
sum(ggplot_build(binIAnorm)$data[[1]]$density)
sum(ggplot_build(binIAnorm)$data[[1]]$ndensity)
BINdensities <- ggplot_build(binIAnorm)$data[[1]]$density
BINdensities
binIA <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1), drop = FALSE) +
coord_fixed()
binIA
binIAnorm <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1), aes(weight = nrow(interestArea))) +
coord_fixed()
binIAnorm
ggplot_build(binIAnorm)$data[[1]]
sum(ggplot_build(binIAnorm)$data[[1]]$density)
sum(ggplot_build(binIAnorm)$data[[1]]$ndensity)
BINdensities <- ggplot_build(binIAnorm)$data[[1]]$density
BINdensities
binIA <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1), drop = FALSE) +
coord_fixed()
binIA
binIAnorm <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1), aes(weight = nrow(interestArea)), drop = FALSE) +
coord_fixed()
binIAnorm
ggplot_build(binIAnorm)$data[[1]]
sum(ggplot_build(binIAnorm)$data[[1]]$density)
sum(ggplot_build(binIAnorm)$data[[1]]$ndensity)
BINdensities <- ggplot_build(binIAnorm)$data[[1]]$density
BINdensities
binIA <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1)) +
coord_fixed()
binIA
binIAnorm <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(1,1), aes(weight = nrow(interestArea)), drop = FALSE) +
coord_fixed()
binIAnorm
ggplot_build(binIAnorm)$data[[1]]
sum(ggplot_build(binIAnorm)$data[[1]]$density)
sum(ggplot_build(binIAnorm)$data[[1]]$ndensity)
BINdensities <- ggplot_build(binIAnorm)$data[[1]]$density
BINdensities
xbins <- seq(4100.5, 2139.5, length = 40)
xbins
xbins <- seq(4100.5, 4139.5, length = 40)
xbins
xbins <- seq(4100.5, 4139.5, length = 40)
ybins <- seq(4035.5, 4074.5, length = 40)
xbins
ybins
xbins <- seq(4100.5, 4139.5, length = 40)
ybins <- seq(4035.5, 4074.5, length = 40)
xbins
ybins
binGrid <- as.grid(xbins, ybins)
xbins <- seq(4100.5, 4139.5, length = 40)
ybins <- seq(4035.5, 4074.5, length = 40)
xbins
ybins
binGrid <- expand.grid(xbins, ybins)
head(binGrid)
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4130, y4 = 4073, alpha4 = 0.6, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(trace = 3, maxit = 200))
MMresult4.2
out4.2 <- MMresult4.2$par
out4.2[[1]] + out4.2[[6]] + out4.2[[11]]
opt4.2params <- c(out4.2[1:15],
1 - out4.2[[1]] - out4.2[[6]] - out4.2[[11]], out4.2[16:19]
)
zMM4.2 <- MM4MOFFATimage(grid, params = opt4.2params)
zmat4.2 <- matrix(zMM4.2, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, log10(zmat4.2), xlab = "x", ylab = "y", main = "2D Moffat")
contours4.2 <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = log10(zMM4.2)), bins = 10) +
coord_fixed()
contours4.2
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData4.2 <- ggplot_build(contours4.2)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel +
geom_path(data = MMcontourData4.2, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) +
geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "blue", alpha = 0.5)
MMcombined
MM5MOFFAT <- function(params, x, y){
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#component density 3
lambda3 <- params[[11]]
x3 <- params[[12]]
y3 <- params[[13]]
alpha3 <- params[[14]]
beta3 <- params[[15]]
#component density 4
lambda4 <- params[[16]]
x4 <- params[[17]]
y4 <- params[[18]]
alpha4 <- params[[19]]
beta4 <- params[[20]]
#component density 5
x5 <- params[[21]]
y5 <- params[[22]]
alpha5 <- params[[23]]
beta5 <- params[[24]]
lambda5 <- 1 - lambda1 - lambda2 - lambda3 - lambda4
#common terms
c1 <- (beta1 - 1)/(pi*alpha1^2)
c2 <- (beta2 - 1)/(pi*alpha2^2)
c3 <- (beta3 - 1)/(pi*alpha3^2)
c4 <- (beta4 - 1)/(pi*alpha4^2)
c5 <- (beta5 - 1)/(pi*alpha5^2)
v1 <- 1+(((x-x1)^2+(y-y1)^2)/alpha1^2)
v2 <- 1+(((x-x2)^2+(y-y2)^2)/alpha2^2)
v3 <- 1+(((x-x3)^2+(y-y3)^2)/alpha3^2)
v4 <- 1+(((x-x4)^2+(y-y4)^2)/alpha4^2)
v5 <- 1+(((x-x5)^2+(y-y5)^2)/alpha5^2)
Density <- lambda1*c1*v1^(-beta1) + lambda2*c2*v2^(-beta2) + lambda3*c3*v3^(-beta3) + lambda4*c4*v4^(-beta4) + lambda5*c5*v5^(-beta5)
return(-sum(log(Density)))
}
MM5MOFFATimage <- function(grid, params){
x <- grid[[1]]
y <- grid[[2]]
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#component density 3
lambda3 <- params[[11]]
x3 <- params[[12]]
y3 <- params[[13]]
alpha3 <- params[[14]]
beta3 <- params[[15]]
#component density 4
lambda4 <- params[[16]]
x4 <- params[[17]]
y4 <- params[[18]]
alpha4 <- params[[19]]
beta4 <- params[[20]]
#component density 5
lambda5 <- params[[21]]
x5 <- params[[22]]
y5 <- params[[23]]
alpha5 <- params[[24]]
beta5 <- params[[25]]
#common terms
c1 <- (beta1 - 1)/(pi*alpha1^2)
c2 <- (beta2 - 1)/(pi*alpha2^2)
c3 <- (beta3 - 1)/(pi*alpha3^2)
c4 <- (beta4 - 1)/(pi*alpha4^2)
c5 <- (beta5 - 1)/(pi*alpha5^2)
v1 <- 1+(((x-x1)^2+(y-y1)^2)/alpha1^2)
v2 <- 1+(((x-x2)^2+(y-y2)^2)/alpha2^2)
v3 <- 1+(((x-x3)^2+(y-y3)^2)/alpha3^2)
v4 <- 1+(((x-x4)^2+(y-y4)^2)/alpha4^2)
v5 <- 1+(((x-x5)^2+(y-y5)^2)/alpha5^2)
return(lambda1*c1*v1^(-beta1) + lambda2*c2*v2^(-beta2) + lambda3*c3*v3^(-beta3) + lambda4*c4*v4^(-beta4) + lambda5*c5*v5^(-beta5))
}
#use optimised parameters from 4 sources
initialParams5 <- c(lambda1 = out4[[1]], x1 = out4[[2]], y1 = out4[[3]], alpha1 = out4[[4]], beta1 = out4[[5]],
lambda2 = out4[[6]], x2 = out4[[7]], y2 = out4[[8]], alpha2 = out4[[9]], beta2 = out3[[10]],
lambda3 = out4[[11]], x3 = out4[[12]], y3 = out4[[13]], alpha3 = out4[[14]], beta3 = out4[[15]],
lambda4 = 0.01, x4 = out4[[16]], y4 = out4[[17]], alpha4 = out4[[18]], beta4 = out4[[19]],
x5 = out4.2[[16]], y5 = out4.2[[17]], alpha5 = out4.2[[18]], beta5 = out4.2[[19]]
)
MM5MOFFAT(initialParams5, xRange, yRange)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult5 <- optim(par = initialParams5, fn = MM5MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(trace = 6))
MMresult5
out5 <- MMresult5$par
out5[[1]] + out5[[6]] + out5[[11]] + out5[[16]]
#use optimised parameters from 4 sources
initialParams5 <- c(lambda1 = out4[[1]], x1 = out4[[2]], y1 = out4[[3]], alpha1 = out4[[4]], beta1 = out4[[5]],
lambda2 = out4[[6]], x2 = out4[[7]], y2 = out4[[8]], alpha2 = out4[[9]], beta2 = out3[[10]],
lambda3 = out4[[11]], x3 = out4[[12]], y3 = out4[[13]], alpha3 = out4[[14]], beta3 = out4[[15]],
lambda4 = 0.01, x4 = out4[[16]], y4 = out4[[17]], alpha4 = out4[[18]], beta4 = out4[[19]],
x5 = out4.2[[16]], y5 = out4.2[[17]], alpha5 = out4.2[[18]], beta5 = out4.2[[19]]
)
MM5MOFFAT(initialParams5, xRange, yRange)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult5 <- optim(par = initialParams5, fn = MM5MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(trace = 3, maxit = 300))
MMresult5
out5 <- MMresult5$par
out5[[1]] + out5[[6]] + out5[[11]] + out5[[16]]
opt5params <- c(out5[1:20],
1 - out5[[1]] - out5[[6]] - out5[[11]] - out5[[16]], out5[21:24]
)
zMM5 <- MM5MOFFATimage(grid, params = opt5params)
zmat5 <- matrix(zMM5, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, log10(zmat5), xlab = "x", ylab = "y", main = "2D Moffat")
contours5 <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = log10(zMM5)), bins = 10) +
coord_fixed()
contours5
interestAreaModel
MMcontourData5 <- ggplot_build(contours5)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel +
geom_path(data = MMcontourData5, aes(x = x, y = y, group = group), color = "blue", alpha = 0.5) #+
# geom_path(data = MMcontourData4.2, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) +
# geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "blue", alpha = 0.5)
MMcombined
optDens <- MM5MOFFAT(out5, x = binGrid$x, y = binGrid$y)
head(optDens)
optDens <- MM5MOFFAT(out5, x = binGrid$x, y = binGrid$y)
optDens
optDens <- MM5MOFFAT(out5, x = binGrid[1,], y = binGrid[2,])
head(optDens)
optDens <- MM5MOFFAT(out5, x = binGrid[,1], y = binGrid[,2])
optDens <- MM5MOFFAT(out5, x = binGrid[,1], y = binGrid[,2])
optDens
BINSMM5MOFFAT <- function(params, x, y){
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#component density 3
lambda3 <- params[[11]]
x3 <- params[[12]]
y3 <- params[[13]]
alpha3 <- params[[14]]
beta3 <- params[[15]]
#component density 4
lambda4 <- params[[16]]
x4 <- params[[17]]
y4 <- params[[18]]
alpha4 <- params[[19]]
beta4 <- params[[20]]
#component density 5
x5 <- params[[21]]
y5 <- params[[22]]
alpha5 <- params[[23]]
beta5 <- params[[24]]
lambda5 <- 1 - lambda1 - lambda2 - lambda3 - lambda4
#common terms
c1 <- (beta1 - 1)/(pi*alpha1^2)
c2 <- (beta2 - 1)/(pi*alpha2^2)
c3 <- (beta3 - 1)/(pi*alpha3^2)
c4 <- (beta4 - 1)/(pi*alpha4^2)
c5 <- (beta5 - 1)/(pi*alpha5^2)
v1 <- 1+(((x-x1)^2+(y-y1)^2)/alpha1^2)
v2 <- 1+(((x-x2)^2+(y-y2)^2)/alpha2^2)
v3 <- 1+(((x-x3)^2+(y-y3)^2)/alpha3^2)
v4 <- 1+(((x-x4)^2+(y-y4)^2)/alpha4^2)
v5 <- 1+(((x-x5)^2+(y-y5)^2)/alpha5^2)
Density <- lambda1*c1*v1^(-beta1) + lambda2*c2*v2^(-beta2) + lambda3*c3*v3^(-beta3) + lambda4*c4*v4^(-beta4) + lambda5*c5*v5^(-beta5)
return(Density)
}
optDens <- BINSMM5MOFFAT(out5, x = binGrid[,1], y = binGrid[,2])
head(optDens)
BINdiff <- BINdensities - optDens
head(BINdiff)
as.data.frame(BINdiff, 40, 40)
BINdiff <- BINdensities - optDens
length(BINdiff)
BINdiff <- BINdensities - optDens
BINdiffDF <- as.data.frame(matrix(BINdiff, nrow = 40, ncol = 40))
head(BINdiffDF)
BINdiff <- BINdensities - optDens
BINdiffDF <- as.data.frame(matrix(BINdiff, nrow = 40, ncol = 40))
head(BINdiff)
head(BINdiffDF)
BINdiff <- BINdensities - optDens
BINdiffDF <- as.data.frame(matrix(BINdiff, nrow = 40, ncol = 40))
sum(BINdiff[1:40]
sum(BINdiffDF[1,])
BINdiff <- BINdensities - optDens
BINdiffDF <- as.data.frame(matrix(BINdiff, nrow = 40, ncol = 40))
sum(BINdiff[1:40])
sum(BINdiffDF[1,])
BINdiff <- BINdensities - optDens
BINdiffDF <- as.data.frame(matrix(BINdiff, nrow = 40, ncol = 40, byrow = TRUE))
sum(BINdiff[1:40])
sum(BINdiffDF[1,])
BINdiff <- BINdensities - optDens
BINdiffDF <- as.data.frame(matrix(BINdiff, nrow = 40, ncol = 40, byrow = TRUE))
sum(BINdiff[1:40])
sum(BINdiffDF[1,])
head(BINdiffDF)
# binDIFF <- ggplot(BINdiffDF, aes(x = x, y = y)) +
#   geom_bin2d(binwidth = c(1,1)) +
#   coord_fixed()
BINdiff <- BINdensities - optDens
BINdiffDF <- as.data.frame(matrix(BINdiff, nrow = 40, ncol = 40, byrow = TRUE, dimnames = list(xbins, ybins)))
sum(BINdiff[1:40])
sum(BINdiffDF[1,])
head(BINdiffDF)
# binDIFF <- ggplot(BINdiffDF, aes(x = x, y = y)) +
#   geom_bin2d(binwidth = c(1,1)) +
#   coord_fixed()
BINdiff <- BINdensities - optDens
BINdiffDF <- as.data.frame(matrix(BINdiff, nrow = 40, ncol = 40, byrow = TRUE, dimnames = list(ybins, xbins)))
sum(BINdiff[1:40])
sum(BINdiffDF[1,])
head(BINdiffDF)
# binDIFF <- ggplot(BINdiffDF, aes(x = x, y = y)) +
#   geom_bin2d(binwidth = c(1,1)) +
#   coord_fixed()
binDIFF <- ggplot(BINdiffDF, aes(x = xbins, y = ybins)) +
geom_bin2d(binwidth = c(1,1)) +
coord_fixed()
library(ggplot2)
binDIFF <- ggplot(BINdiffDF, aes(x = xbins, y = ybins)) +
geom_bin2d(binwidth = c(1,1)) +
coord_fixed()
binDIFF <- ggplot(BINdiffDF, aes(x = xbins, y = ybins)) +
geom_bin2d(binwidth = c(1,1)) +
coord_fixed()
binDIFF
library(tidyverse)
longDIFF <- BINdiffDF %>%
rownames_to_column(var = "ybins") %>%
pivot_longer(col = -ybins, names_to = "xbins", values_to = "value")
binDIFF <- ggplot(longDIFF, aes(x = xbins, y = ybins, fill = value)) +
geom_tile() +
coord_fixed()
binDIFF
longDIFF <- BINdiffDF %>%
rownames_to_column(var = "ybins") %>%
pivot_longer(col = -ybins, names_to = "xbins", values_to = "value")
binDIFF <- ggplot(longDIFF, aes(x = xbins, y = ybins, fill = value)) +
geom_tile() +
theme_minimal() +
coord_fixed()
binDIFF
longDIFF <- BINdiffDF %>%
rownames_to_column(var = "ybins") %>%
pivot_longer(col = -ybins, names_to = "xbins", values_to = "value")
binDIFF <- ggplot(longDIFF, aes(x = xbins, y = ybins, fill = value)) +
geom_tile() +
coord_fixed()
binDIFF
longDIFF <- BINdiffDF %>%
rownames_to_column(var = "ybins") %>%
pivot_longer(col = -ybins, names_to = "xbins", values_to = "value")
binDIFF <- ggplot(longDIFF, aes(x = xbins, y = ybins, fill = value)) +
geom_tile(xlab = FALSE) +
coord_fixed()
binDIFF
longDIFF <- BINdiffDF %>%
rownames_to_column(var = "ybins") %>%
pivot_longer(col = -ybins, names_to = "xbins", values_to = "value")
xLabels <- levels(factor(longDIFF$xbins))[seq(1, 40, by = 5)]
yLabels <- levels(factor(longDIFF$ybins))[seq(1, 40, by = 5)]
binDIFF <- ggplot(longDIFF, aes(x = xbins, y = ybins, fill = value)) +
geom_tile() +
scale_x_discrete(breaks = xLabels) +
scale_y_discrete(breaks = yLabels) +
labs(x = "x", y = "y", title = "Difference between binned data and modelled data")
coord_fixed()
binDIFF
longDIFF <- BINdiffDF %>%
rownames_to_column(var = "ybins") %>%
pivot_longer(col = -ybins, names_to = "xbins", values_to = "value")
xLabels <- levels(factor(longDIFF$xbins))[seq(1, 40, by = 5)]
yLabels <- levels(factor(longDIFF$ybins))[seq(1, 40, by = 5)]
binDIFF <- ggplot(longDIFF, aes(x = xbins, y = ybins, fill = value)) +
geom_tile() +
scale_x_discrete(breaks = xLabels) +
scale_y_discrete(breaks = yLabels) +
labs(x = "x", y = "y", title = "Difference between Binned Data and Mixture Model") +
coord_fixed()
binDIFF
#BINNING the row data into 80 by 80
bin2IAnorm <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(0.5, 0.5), aes(weight = nrow(interestArea)), drop = FALSE) +
coord_fixed()
bin2IAnorm
ggplot_build(bin2IAnorm)$data[[1]]
BINdensities2 <- ggplot_build(bin2IAnorm)$data[[1]]$density
BINdensities2
#obtaining values for the model
xbins2 <- seq(4100.25, 4139.75, length = 80)
ybins2 <- seq(4035.25, 4074.75, length = 80)
xbins2
ybins2
binGrid2 <- expand.grid(xbins2, ybins2)
head(binGrid2)
optDens2 <- BINSMM5MOFFAT(out5, x = binGrid2[,1], y = binGrid2[,2])
#Finding the difference between the BINNED data and the model, convert to a dataframe
BINdiff2 <- BINdensities2 - optDens2
BINdiffDF2 <- as.data.frame(matrix(BINdiff2, nrow = 80, ncol = 80, byrow = TRUE, dimnames = list(ybins, xbins)))
#BINNING the row data into 80 by 80
bin2IAnorm <- ggplot(interestArea, aes(x = x, y = y)) +
geom_bin2d(binwidth = c(0.5, 0.5), aes(weight = nrow(interestArea)), drop = FALSE) +
coord_fixed()
bin2IAnorm
ggplot_build(bin2IAnorm)$data[[1]]
BINdensities2 <- ggplot_build(bin2IAnorm)$data[[1]]$density
BINdensities2
#obtaining values for the model
xbins2 <- seq(4100.25, 4139.75, length = 80)
ybins2 <- seq(4035.25, 4074.75, length = 80)
binGrid2 <- expand.grid(xbins2, ybins2)
head(binGrid2)
optDens2 <- BINSMM5MOFFAT(out5, x = binGrid2[,1], y = binGrid2[,2])
#Finding the difference between the BINNED data and the model, convert to a dataframe
BINdiff2 <- BINdensities2 - optDens2
BINdiffDF2 <- as.data.frame(matrix(BINdiff2, nrow = 80, ncol = 80, byrow = TRUE, dimnames = list(ybins2, xbins2)))
sum(BINdiff2[1:80])
sum(BINdiffDF2[1,])
head(BINdiffDF2)
#Visualising
longDIFF2 <- BINdiffDF2 %>%
rownames_to_column(var = "ybins") %>%
pivot_longer(col = -ybins, names_to = "xbins", values_to = "value")
xLabels2 <- levels(factor(longDIFF2$xbins))[seq(1, 80, by = 10)]
yLabels2 <- levels(factor(longDIFF2$ybins))[seq(1, 80, by = 10)]
binDIFF2 <- ggplot(longDIFF2, aes(x = xbins, y = ybins, fill = value)) +
geom_tile() +
scale_x_discrete(breaks = xLabels2) +
scale_y_discrete(breaks = yLabels2) +
labs(x = "x", y = "y", title = "Difference between Binned Data and Mixture Model ") +
coord_fixed()
binDIFF2
