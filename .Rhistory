mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predicted <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
return(sum(predicted))
}
negLogLike <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predictedDens <- MoffatNS(x, parameters)
return(-sum(log(predictedDens)))
}
MoffatDeriv <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
d_A = sum((1 + (x - mu)^2 / gamma^2)^(-alpha))
d_mu = -2*sum(amplitude*alpha*(x - mu)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^2))
d_gamma = -2*sum(amplitude*alpha*((x - mu)^2)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^3))
d_alpha = sum(amplitude*(1 + (x - mu)^2 / gamma^2)^(-alpha)*log((1 + (x - mu)^2 / gamma^2)))
return((c(d_A, d_mu, d_gamma, d_alpha)))
}
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 0, gamma = 1, alpha = 1)
#set bounds
lowerBounds <- c(0,-Inf, 0, 0)
upperBounds <- c(Inf, Inf, Inf, Inf)
#Optimise
result <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "L-BFGS-B")
optimPar <- result$par
print(optimPar)
result2 <- optim(par = initialGuess, fn = negLogLike, gr = MoffatDeriv, x = sampleData, method = "L-BFGS-B", lower = lowerBounds)
optimPar2 <- result2$par
print(optimPar2)
#plot time
xVal <- seq(min(sampleData), max(sampleData), length = 1000)
optimisedDens <- MoffatNS(optimPar, xVal)
optDens2 <- MoffatNS(optimPar2, xVal)
plot(MoffatNS(sampleData, initialGuess))
plot(MoffatNS(initialGuess, sampleData))
plot(sampleData)
plot(xVal, optimisedDens, type = "l", main = "Optimised Density Function (Gaussian)", xlab = "x", ylab = "Density")
plot(xVal, optimisedDens, type = "l", main = "Optimised Density Function (Moffat, NLL)", xlab = "x", ylab = "Density")
plot(xVal, optDens2, type = "l", main = "Optimised Density Function (Moffat, grad)", xlab = "x", ylab = "Density")
#Fitting to data
#plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 4115, gamma = 1, alpha = 1)
#Optimise
result <- optim(par = initialGuess, fn = Moffat1D, x = xl2, lower = lowerBounds, method = "L-BFGS-B")
optimPar <- result$par
print(optimPar)
#plot
xVal <- seq(min(xl2), max(xl2), length = 963)
optimisedDens <- MoffatNS(optimPar, xVal)
plot(xVal, optimisedDens, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
legend("topright", legend = "Optimised Density", lty = 1)
par(mfrow = c(1,2))
plot(xl2)
plot(MoffatNS(optimPar, xl2))
MoffatNS <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
MS <- function(parameters, x){
predicted <- MoffatNS(parameters, x)
return(sum(predicted))
}
#Define the function
Moffat1D <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predicted <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
return(sum(predicted))
}
negLogLike <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predictedDens <- MoffatNS(parameters, x)
return(-sum(log(predictedDens)))
}
MoffatDeriv <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
d_A = sum((1 + (x - mu)^2 / gamma^2)^(-alpha))
d_mu = -2*sum(amplitude*alpha*(x - mu)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^2))
d_gamma = -2*sum(amplitude*alpha*((x - mu)^2)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^3))
d_alpha = sum(amplitude*(1 + (x - mu)^2 / gamma^2)^(-alpha)*log((1 + (x - mu)^2 / gamma^2)))
return((c(d_A, d_mu, d_gamma, d_alpha)))
}
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 0, gamma = 1, alpha = 1)
#set bounds
lowerBounds <- c(0,-Inf, 0, 0)
upperBounds <- c(Inf, Inf, Inf, Inf)
#Optimise
result <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "L-BFGS-B")
MoffatNS <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
MS <- function(parameters, x){
predicted <- MoffatNS(parameters, x)
return(sum(predicted))
}
#Define the function
Moffat1D <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predicted <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
return(sum(predicted))
}
negLogLike <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predictedDens <- MoffatNS(parameters, x)
return(-sum(log(predictedDens)))
}
MoffatDeriv <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
d_A = sum((1 + (x - mu)^2 / gamma^2)^(-alpha))
d_mu = -2*sum(amplitude*alpha*(x - mu)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^2))
d_gamma = -2*sum(amplitude*alpha*((x - mu)^2)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^3))
d_alpha = sum(amplitude*(1 + (x - mu)^2 / gamma^2)^(-alpha)*log((1 + (x - mu)^2 / gamma^2)))
return((c(d_A, d_mu, d_gamma, d_alpha)))
}
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 0, gamma = 1, alpha = 1)
#set bounds
lowerBounds <- c(0,-Inf, 0.001, 0)
upperBounds <- c(Inf, Inf, Inf, Inf)
#Optimise
result <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "L-BFGS-B")
#Fitting to data
#plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 4115, gamma = 1, alpha = 1)
#Optimise
result <- optim(par = initialGuess, fn = Moffat1D, x = xl2, lower = lowerBounds, method = "L-BFGS-B")
optimPar <- result$par
print(optimPar)
#plot
xVal <- seq(min(xl2), max(xl2), length = 963)
optimisedDens <- MoffatNS(optimPar, xVal)
plot(xVal, optimisedDens, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
legend("topright", legend = "Optimised Density", lty = 1)
par(mfrow = c(1,2))
plot(xl2)
plot(MoffatNS(optimPar, xl2))
MoffatNS <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
MS <- function(parameters, x){
predicted <- MoffatNS(parameters, x)
return(sum(predicted))
}
#Define the function
Moffat1D <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predicted <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
return(sum(predicted))
}
negLogLike <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predictedDens <- MoffatNS(parameters, x)
return(-sum(log(predictedDens)))
}
MoffatDeriv <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
d_A = sum((1 + (x - mu)^2 / gamma^2)^(-alpha))
d_mu = -2*sum(amplitude*alpha*(x - mu)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^2))
d_gamma = -2*sum(amplitude*alpha*((x - mu)^2)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^3))
d_alpha = sum(amplitude*(1 + (x - mu)^2 / gamma^2)^(-alpha)*log((1 + (x - mu)^2 / gamma^2)))
return((c(d_A, d_mu, d_gamma, d_alpha)))
}
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 0, gamma = 1, alpha = 1)
#set bounds
lowerBounds <- c(0,-Inf, 0.1, 0)
upperBounds <- c(Inf, Inf, Inf, Inf)
#Optimise
result <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "L-BFGS-B")
MoffatNS <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
MS <- function(parameters, x){
predicted <- MoffatNS(parameters, x)
return(sum(predicted))
}
#Define the function
Moffat1D <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predicted <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
return(sum(predicted))
}
negLogLike <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predictedDens <- MoffatNS(parameters, x)
return(-sum(log(predictedDens)))
}
MoffatDeriv <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
d_A = sum((1 + (x - mu)^2 / gamma^2)^(-alpha))
d_mu = -2*sum(amplitude*alpha*(x - mu)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^2))
d_gamma = -2*sum(amplitude*alpha*((x - mu)^2)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^3))
d_alpha = sum(amplitude*(1 + (x - mu)^2 / gamma^2)^(-alpha)*log((1 + (x - mu)^2 / gamma^2)))
return((c(d_A, d_mu, d_gamma, d_alpha)))
}
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 0, gamma = 1, alpha = 1)
#set bounds
lowerBounds <- c(0,-Inf, 0.1, 0)
upperBounds <- c(Inf, Inf, Inf, Inf)
#Optimise
#result <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "L-BFGS-B")
#optimPar <- result$par
#print(optimPar)
result2 <- optim(par = initialGuess, fn = negLogLike, gr = MoffatDeriv, x = sampleData, method = "L-BFGS-B", lower = lowerBounds)
MoffatNS <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
MS <- function(parameters, x){
predicted <- MoffatNS(parameters, x)
return(sum(predicted))
}
#Define the function
Moffat1D <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predicted <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
return(sum(predicted))
}
negLogLike <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predictedDens <- MoffatNS(parameters, x)
return(-sum(log(predictedDens)))
}
MoffatDeriv <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
d_A = sum((1 + (x - mu)^2 / gamma^2)^(-alpha))
d_mu = -2*sum(amplitude*alpha*(x - mu)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^2))
d_gamma = -2*sum(amplitude*alpha*((x - mu)^2)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^3))
d_alpha = sum(amplitude*(1 + (x - mu)^2 / gamma^2)^(-alpha)*log((1 + (x - mu)^2 / gamma^2)))
return((c(d_A, d_mu, d_gamma, d_alpha)))
}
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 0, gamma = 1, alpha = 1)
#set bounds
lowerBounds <- c(0,-Inf, 0.1, 0)
upperBounds <- c(Inf, Inf, Inf, Inf)
#Optimise
#result <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "L-BFGS-B")
#optimPar <- result$par
#print(optimPar)
result2 <- optim(par = initialGuess, fn = MoffatNS(), gr = MoffatDeriv, x = sampleData, method = "L-BFGS-B", lower = lowerBounds)
MoffatNS <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
MS <- function(parameters, x){
predicted <- MoffatNS(parameters, x)
return(sum(predicted))
}
#Define the function
Moffat1D <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predicted <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
return(sum(predicted))
}
negLogLike <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predictedDens <- MoffatNS(parameters, x)
return(-sum(log(predictedDens)))
}
MoffatDeriv <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
d_A = sum((1 + (x - mu)^2 / gamma^2)^(-alpha))
d_mu = -2*sum(amplitude*alpha*(x - mu)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^2))
d_gamma = -2*sum(amplitude*alpha*((x - mu)^2)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^3))
d_alpha = sum(amplitude*(1 + (x - mu)^2 / gamma^2)^(-alpha)*log((1 + (x - mu)^2 / gamma^2)))
return((c(d_A, d_mu, d_gamma, d_alpha)))
}
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 0, gamma = 1, alpha = 1)
#set bounds
lowerBounds <- c(0,-Inf, 0.1, 0)
upperBounds <- c(Inf, Inf, Inf, Inf)
#Optimise
#result <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "L-BFGS-B")
#optimPar <- result$par
#print(optimPar)
result2 <- optim(par = initialGuess, fn = MoffatNS, gr = MoffatDeriv, x = sampleData, method = "L-BFGS-B", lower = lowerBounds)
MoffatNS <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
}
MS <- function(parameters, x){
predicted <- MoffatNS(parameters, x)
return(sum(predicted))
}
#Define the function
Moffat1D <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predicted <- amplitude*(1+((x-mu)^2/gamma^2))^(-alpha)
return(sum(predicted))
}
negLogLike <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
predictedDens <- MoffatNS(parameters, x)
return(-sum(log(predictedDens)))
}
MoffatDeriv <- function(parameters, x){
amplitude <- parameters[1]
mu <- parameters[2]
gamma <- parameters[3]
alpha <- parameters[4]
d_A = sum((1 + (x - mu)^2 / gamma^2)^(-alpha))
d_mu = -2*sum(amplitude*alpha*(x - mu)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^2))
d_gamma = -2*sum(amplitude*alpha*((x - mu)^2)*(1 + (x - mu)^2 / gamma^2)^(-alpha)/((1 + (x - mu)^2 / gamma^2)*gamma^3))
d_alpha = sum(amplitude*(1 + (x - mu)^2 / gamma^2)^(-alpha)*log((1 + (x - mu)^2 / gamma^2)))
return((c(d_A, d_mu, d_gamma, d_alpha)))
}
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 0, gamma = 1, alpha = 1)
#set bounds
lowerBounds <- c(0,-Inf, 0.1, 0)
upperBounds <- c(Inf, Inf, Inf, Inf)
#Optimise
#result <- optim(par = initialGuess, fn = negLogLike, x = sampleData, method = "L-BFGS-B")
#optimPar <- result$par
#print(optimPar)
result2 <- optim(par = initialGuess, fn = Moffat1D, gr = MoffatDeriv, x = sampleData, method = "L-BFGS-B", lower = lowerBounds)
optimPar2 <- result2$par
print(optimPar2)
#plot time
xVal <- seq(min(sampleData), max(sampleData), length = 1000)
optimisedDens <- MoffatNS(optimPar, xVal)
optDens2 <- MoffatNS(optimPar2, xVal)
#Fitting to data
#plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 4115, gamma = 1, alpha = 1)
#Optimise
result <- optim(par = initialGuess, fn = Moffat1D, x = xl2, lower = lowerBounds, method = "L-BFGS-B")
optimPar <- result$par
print(optimPar)
#plot
xVal <- seq(min(xl2), max(xl2), length = 963)
optimisedDens <- MoffatNS(optimPar, xVal)
plot(xVal, optimisedDens, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
legend("topright", legend = "Optimised Density", lty = 1)
par(mfrow = c(1,2))
plot(xl2)
plot(MoffatNS(optimPar, xl2))
#Optimise
resultl2 <- optim(par = initialGuess, fn = negLogLike, x = xl2, method = "L-BFGS-B", lower = lowerBounds, upper = upperBounds)
optimParl2 <- resultl2$par
print(optimParl2)
optDenl2 <- MoffatNS(optimParl2, xVal)
plot(xVal, optDenl2, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
plot(MoffatNS(initialGuess, xl2))
print(MoffatNS(initialGuess, xl2))
#Fitting to data
#plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 4115, gamma = 1, alpha = 1)
#Optimise
result <- optim(par = initialGuess, fn = Moffat1D, x = xl2.5, lower = lowerBounds, method = "L-BFGS-B")
#data to fit to
plotdist(line2$x)
plot(line2)
xl2 <- line2$x
plot(xl2)
line2.5 <- POI2 %>%
filter(y>4050.5 & y< 4051)
xl2.5 <- line2.5$x
#Fitting to data
#plot(xl2)
#set initial guesses
initialGuess <- c(amplitude = 1, mu = 4115, gamma = 1, alpha = 1)
#Optimise
result <- optim(par = initialGuess, fn = Moffat1D, x = xl2.5, lower = lowerBounds, method = "L-BFGS-B")
optimPar <- result$par
print(optimPar)
#plot
xVal <- seq(min(xl2.5), max(xl2.5), length = 291)
optimisedDens <- MoffatNS(optimPar, xVal)
plot(xVal, optimisedDens, type = "l", main = "Optimised Density Function", xlab = "x", ylab = "Density")
legend("topright", legend = "Optimised Density", lty = 1)
par(mfrow = c(1,2))
plot(xl2.5)
plot(MoffatNS(optimPar, xl2.5))
library(tidyverse) # Load tidyverse
install.packages("tidyverse")
library(tidyverse) # Load tidyverse
library(tidyverse) # Load tidyverse
library(tidyverse) # Load tidyverse
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse) # Load tidyverse
#library(tidyverse) # Load tidyverse
library(dslabs) # load dslabs
library(flextable) # To prettify tables
#library(tidyverse) # Load tidyverse
library(dslabs) # load dslabs
#library(flextable) # To prettify tables
# Load gapminder dataset
data(gapminder)
# Convert gapminder into a tibble and assign it to gapData
gapData <- as_tibble(gapminder)
library(rlang)
library(rematch2)
library(broom)
library(tidyselect)
library(tidyr)
#library(tidyverse) # Load tidyverse
library(dslabs) # load dslabs
#library(flextable) # To prettify tables
# Load gapminder dataset
data(gapminder)
# Convert gapminder into a tibble and assign it to gapData
gapData <- as_tibble(gapminder)
library(here)
library(tidyr)
library(tidyr)
detach("package:tidyr", unload = TRUE)
detach("package:tidyselect", unload = TRUE)
detach("package:broom", unload = TRUE)
detach("package:rematch2", unload = TRUE)
library(ggplot2)
