# dy1 <- -sum(((2*lambda1*c1*beta1*v1^(-beta1-1))*((y-y1)/alpha1^2))/u)
# dy2 <- -sum(((2*lambda2*c2*beta2*v2^(-beta2-1))*((y-y2)/alpha2^2))/u)
dAlpha1 <- -sum((2*lambda1*(beta1^2 - 1))/(u*pi*(v1^beta1)*(alpha1^3)))
dAlpha2 <- -sum((2*lambda2*(beta2^2 - 1))/(u*pi*(v2^beta2)*(alpha2^3)))
# dAlpha1 <- -sum(((2*lambda1*(beta1 - 1)/(pi*alpha1^3*v1^beta1))*((beta1*((x-x1)^2 + (y-y1)^2)/(v1*alpha1^2))-1))/u)
# dAlpha2 <- -sum(((2*lambda1*(beta1 - 1)/(pi*alpha1^3*v1^beta1))*((beta1*((x-x1)^2 + (y-y1)^2)/(v1*alpha1^2))-1))/u)
dBeta1 <- -sum((s1*(1+log(v1)-beta1*log(v1)))/(u*v1^beta1))
dBeta2 <- -sum((s2*(1+log(v2)-beta2*log(v2)))/(u*v2^beta2))
# dBeta1 <- -sum(((s1*v1^(-beta1)*log(v1))*(1-beta1))/u)
# dBeta2 <- -sum(((s2*v2^(-beta2)*log(v2))*(1-beta2))/u)
return(c(dLambda1, dx1, dy1, dAlpha1, dBeta1, dx2, dy2, dAlpha2, dBeta2))
}
library(optimx)
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
# initialParams2 <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1.1, beta = 1.8, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1.2, beta = 2)
lowerbounds = c(1e-6, -100, -100, 1e-6, 1+1e-6, -100, -100, 1e-6, 1+1e-6)
upperbounds = c(1, 100, 100, Inf, Inf, 100, 100, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
opt
opt2
out <- MMresult$par
out
xRange <- seq(-20, 20, length = 100)
yRange <- seq(-20, 20, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
dataFull <- as.data.frame(datafull)
colnames(dataFull) = c("x", "y")
randomModel <- ggplot(dataFull, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(2, 4, 8, 16)) +
coord_fixed()
randomModel2 <- ggplot(dataFull, aes(x = x, y = y)) +
geom_point(size = 0.2)
randomModel
contours
randomModel2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- randomModel2 + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- randomModel2 + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) + coord_fixed()
MMcombined
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha = 0.683, beta = 1.9, x2 = 4124, y2 = 4063, alpha = 0.5, beta = 1.9)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
xRange <- seq(4110, 4130, length = 100)
yRange <- seq(4045, 4065, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
contours
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S1$x), y1 = mean(interestArea2S1$y), alpha = 0.7, beta = 1.9, x2 = mean(interestArea2S2$x), y2 = mean(interestArea2S2$y), alpha = 0.5, beta = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
contours
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
initialParams <- c(lambda1 = 0.5, x1 = 4115.261, y1 = 4051.904, alpha = 0.683, beta = 1.9, x2 = 4124, y2 = 4063, alpha = 0.5, beta = 1.9)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha = 0.683, beta = 1.9, x2 = 4124, y2 = 4063, alpha = 0.5, beta = 1.9)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
set.seed(111)
data1 <- cbind(rnorm(300, mean = 0, sd = 0.4), rnorm(300, mean = 0, sd = 0.4))
data2 <- cbind(rnorm(300, mean = 5, sd = 0.4), rnorm(300, mean = 5, sd = 0.4))
datafull <- rbind(data1, data2)
plot(data1)
plot(data2)
plot(datafull)
initParams = c(x0 = 0, y0 = 0, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result <- optim(par = initParams, fn = NLL2D, gr = deriv2DNLL, x = data1[,1], y = data1[,2], method = "L-BFGS-B", lower = lowerBounds)
opt <- result$par
initParams2 = c(x0 = 5, y0 = 5, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result2 <- optim(par = initParams2, fn = NLL2D, gr = deriv2DNLL, x = data2[,1], y = data2[,2], method = "L-BFGS-B", lower = lowerBounds)
opt2 <- result2$par
library(optimx)
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
# initialParams2 <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1.1, beta = 1.8, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1.2, beta = 2)
lowerbounds = c(1e-6, -100, -100, 1e-6, 1+1e-6, -100, -100, 1e-6, 1+1e-6)
upperbounds = c(1, 100, 100, Inf, Inf, 100, 100, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
opt
opt2
out <- MMresult$par
out
xRange <- seq(-20, 20, length = 100)
yRange <- seq(-20, 20, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
dataFull <- as.data.frame(datafull)
colnames(dataFull) = c("x", "y")
randomModel <- ggplot(dataFull, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(2, 4, 8, 16)) +
coord_fixed()
randomModel2 <- ggplot(dataFull, aes(x = x, y = y)) +
geom_point(size = 0.2)
randomModel
contours
randomModel2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- randomModel2 + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) + coord_fixed()
MMcombined
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha = 0.683, beta = 1.9, x2 = 4124, y2 = 4063, alpha = 0.5, beta = 1.9)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
xRange <- seq(4110, 4130, length = 100)
yRange <- seq(4045, 4065, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
contours
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S1$x), y1 = mean(interestArea2S1$y), alpha = 0.7, beta = 1.9, x2 = mean(interestArea2S2$x), y2 = mean(interestArea2S2$y), alpha = 0.5, beta = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
contours
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_point(adjust = 0.05, size = 0.1, shape = "1") +
coord_fixed()
interestArea2Model2
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_point(size = 0.5, shape = "1") +
coord_fixed()
interestArea2Model2
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S2$x), y1 = mean(interestArea2S2$y), alpha = 0.7, beta = 1.9, x2 = mean(interestArea2S1$x), y2 = mean(interestArea2S1$y), alpha = 0.5, beta = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
contours
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_point(size = 0.5, shape = "1") +
coord_fixed()
interestArea2Model2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
library(optimx)
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha1 = opt[[3]], beta1 = opt[[4]], x2 = opt2[[1]], y2 = opt2[[2]], alpha1 = opt2[[3]], beta1 = opt2[[3]])
# initialParams2 <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1.1, beta = 1.8, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1.2, beta = 2)
lowerbounds = c(1e-6, -100, -100, 1e-6, 1+1e-6, -100, -100, 1e-6, 1+1e-6)
upperbounds = c(1, 100, 100, Inf, Inf, 100, 100, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
opt
opt2
out <- MMresult$par
out
xRange <- seq(-20, 20, length = 100)
yRange <- seq(-20, 20, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
dataFull <- as.data.frame(datafull)
colnames(dataFull) = c("x", "y")
randomModel <- ggplot(dataFull, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(2, 4, 8, 16)) +
coord_fixed()
randomModel2 <- ggplot(dataFull, aes(x = x, y = y)) +
geom_point(size = 0.2)
randomModel
contours
randomModel2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- randomModel2 + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) + coord_fixed()
MMcombined
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
xRange <- seq(4110, 4130, length = 100)
yRange <- seq(4045, 4065, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
contours
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S1$x), y1 = mean(interestArea2S1$y), alpha1 = 0.7, beta1 = 1.9, x2 = mean(interestArea2S2$x), y2 = mean(interestArea2S2$y), alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
contours
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_point(size = 0.5, shape = "1") +
coord_fixed()
interestArea2Model2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
library(optimx)
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha1 = opt[[3]], beta1 = opt[[4]], x2 = opt2[[1]], y2 = opt2[[2]], alpha2 = opt2[[3]], beta2 = opt2[[3]])
# initialParams2 <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1.1, beta = 1.8, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1.2, beta = 2)
lowerbounds = c(1e-6, -100, -100, 1e-6, 1+1e-6, -100, -100, 1e-6, 1+1e-6)
upperbounds = c(1, 100, 100, Inf, Inf, 100, 100, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
opt
opt2
out <- MMresult$par
out
xRange <- seq(-20, 20, length = 100)
yRange <- seq(-20, 20, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
dataFull <- as.data.frame(datafull)
colnames(dataFull) = c("x", "y")
randomModel <- ggplot(dataFull, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(2, 4, 8, 16)) +
coord_fixed()
randomModel2 <- ggplot(dataFull, aes(x = x, y = y)) +
geom_point(size = 0.2)
randomModel
contours
randomModel2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- randomModel2 + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) + coord_fixed()
MMcombined
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(readr)
library(ggpointdensity)
library(viridis)
library(tidyr)
library(fitdistrplus)
## Color pallete
cbPalette <- c("#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
library(here)
i_am("MoffatPDF.Rmd")
# laptop data from csv
Terzan5 <- readr::read_csv(here("Data", "Terzan 5 X-ray events.csv"), col_types = list(.default = readr::col_guess()), )
# head(Terzan5)
#fishbowl data from ODS
# library(readODS)
# Terzan5 <- read_ods(here("Raw Data.ods"), col_types = list(.default = readr::col_guess()), )
#removing extraneous columns
T5 <- data.frame(Terzan5$x, Terzan5$y)
colnames(T5) <- c('x','y')
POI1 <- T5 %>%
filter(x>4160 & x<4180 & y>4180 & y<4200)
POI2 <- T5 %>%
filter(x>4105 & x< 4125 & y>4040 & y<4060)
ggplot(POI1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
ggplot(POI2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
# line0 <- POI2 %>%
#   filter(y>4048.5 & y< 4049.5)
# line1 <- POI2 %>%
#   filter(y>4049.5 & y< 4050.5)
line2 <- POI2 %>%
filter(y>4050.5 & y< 4051.5)
# line3 <- POI2 %>%
#   filter(y>4051.5 & y< 4052.5)
# line4 <- POI2 %>%
#   filter(y>4052.5 & y< 4053.5)
# line5 <- POI2 %>%
#   filter(y>4053.5 & y< 4054.5)
# line6 <- POI2 %>%
#   filter(y>4054.5 & y< 4055.5)
# lineback <- POI2 %>%
#   filter(y>4055 & y< 4060)
line2.5 <- POI2 %>%
filter(y>4050.5 & y< 4051)
xl2 <- line2$x
# Define the Gaussian density function
gaussian_density <- function(parameters, x) {
mean <- parameters[[1]]
sd <- parameters[[2]]
return(dnorm(x, mean = mean, sd = sd))
}
# Define the negative log-likelihood function for Gaussian distribution
negative_log_likelihood <- function(parameters, x) {
predicted_density <- gaussian_density(parameters, x)
return(-sum(log(predicted_density)))
}
initial_guess <- c(mean = 4115, sd = 1)
# Optimize the negative log-likelihood function
result <- optim(par = initial_guess, fn = negative_log_likelihood, x = xl2, method = "Nelder-Mead")
result
# Extract the optimized parameters
optimized_parameters <- result$par
optimized_parameters
modelPOI2 + geom_abline(y = 4050.5)
modelPOI1 <- ggplot(POI1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
modelPOI2 <- ggplot(POI2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
modelPOI2 + geom_abline(y = 4050.5)
modelPOI2 + geom_line(yintercept = 4050.5)
modelPOI2 #+ geom_line(yintercept = 4050.5)
modelPOI2 + geom_hline(yintercept = 4050.5)
modelPOI2 + geom_hline(yintercept = 4050.5) + geom_hline(yintercept = 4051.5)
optimParameters2N <- gaussian_density(optimized_parameters, xl2)
## plotting layers in ggplot
histLine2 <- ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5])
histWithNormL2 <- histLine2 +
stat_function(fun = gaussian_density, args = list(parameters = optimized_parameters), n=1000, aes(colour="gaussian density"), linewidth=1.2) +
ylab("p(x)") +
scale_colour_manual("Legend", values = cbPalette)
histLine2
histWithNormL2
histLine2 <- ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5])
histLine2
histLine2 <- ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 100, fill=cbPalette[5])
histLine2
histLine2 <- ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 80, fill=cbPalette[5])
histLine2
histLine2 <- ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 200, fill=cbPalette[5])
histLine2
histLine2 <- ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 150, fill=cbPalette[5])
histLine2
histLine2 <- ggplot(line2) +
geom_histogram(aes(x, y = after_stat(density), colour = "data"), bins = 50, fill=cbPalette[5])
histLine2
