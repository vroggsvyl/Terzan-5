plot(datafull)
fit <- mvnormalmixEM(datafull, k = 2)
names(fit)
fit$lambda
fit$mu
fit$sigma
fit$loglik
#fit$posterior
fit$all.loglik
fit$restarts
plot.mixEM(fit, whichplots = 2)
plot.mixEM(fit, whichplots = 1)
randomClusters <- rbind(randomMatrix2, randomMatrix3)
fit1 <- mvnormalmixEM(randomClusters, k = 2)
fit1
plot.mixEM(fit1, whichplots = 2)
points(z[,1], z[,2], col = "blue") #random point - what's the density of this point if it exists in either cluster?
fit2 <- NMixEM(randomClusters, K= 2)
fit2
initialParams <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1, beta = 2, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1, beta = 2)
lowerbounds = (0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
initialParams <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1, beta = 2, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1, beta = 2)
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
derivNLLMM2MOFFAT <- function(params, x, y){
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#common expressions
u <- ((lambda1*(beta1 - 1)/(pi*alpha1^2))*(1+((x-x1)^2+(y-y1)^2)/(alpha1^2))^(-beta1)) +
((lambda2*(beta2 - 1)/(pi*alpha2^2))*(1+((x-x2)^2+(y-y2)^2)/(alpha2^2))^(-beta2))
v1 <- (1+((x-x1)^2+(y-y1)^2)/(alpha1^2))
v2 <- (1+((x-x2)^2+(y-y2)^2)/(alpha2^2))
c1 <- ((beta1 - 1)/(pi*alpha1^2))
c2 <- ((beta2 - 1)/(pi*alpha2^2))
s1 <- lambda1/(pi*alpha1^2)
s2 <- lambda2/(pi*alpha2^2)
#partial derivatives
dLamba1 <- -sum((c1*v1^-beta1)/u)
dLamba2 <- -sum((c2*v2^-beta2)/u)
dx1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(x-x1)/alpha1^2))/u)
dx2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(x-x2)/alpha2^2))/u)
dy1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(y-y1)/alpha1^2))/u)
dy2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(y-y2)/alpha2^2))/u)
dAlpha1 <- -sum((2*lambda1*c1)*((beta1*((x-x1)^2+(y-y1)^2))/(v1^(-beta1-1)) - (v1^-beta1)/alpha1)/u)
dAlpha2 <- -sum((2*lambda2*c2)*((beta2*((x-x2)^2+(y-y2)^2))/(v1^(-beta2-1)) - (v2^-beta2)/alpha2)/u)
dBeta1 <- -sum((s1*v1^-beta1*(1-beta1*ln(v1)+ln*(v1)))/u)
dBeta2 <- -sum((s2*v2^-beta2*(1-beta2*ln(v2)+ln*(v2)))/u)
return(c(dLambda1, dx1, dy1, dAlpha1, dBeta1, dLamba2, dx2, dy2, dAlpha2, dBeta2))
}
initialParams <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1, beta = 2, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1, beta = 2)
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
derivNLLMM2MOFFAT <- function(params, x, y){
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#common expressions
u <- ((lambda1*(beta1 - 1)/(pi*alpha1^2))*(1+((x-x1)^2+(y-y1)^2)/(alpha1^2))^(-beta1)) +
((lambda2*(beta2 - 1)/(pi*alpha2^2))*(1+((x-x2)^2+(y-y2)^2)/(alpha2^2))^(-beta2))
v1 <- (1+((x-x1)^2+(y-y1)^2)/(alpha1^2))
v2 <- (1+((x-x2)^2+(y-y2)^2)/(alpha2^2))
c1 <- ((beta1 - 1)/(pi*alpha1^2))
c2 <- ((beta2 - 1)/(pi*alpha2^2))
s1 <- lambda1/(pi*alpha1^2)
s2 <- lambda2/(pi*alpha2^2)
#partial derivatives
dLamba1 <- -sum((c1*v1^-beta1)/u)
dLamba2 <- -sum((c2*v2^-beta2)/u)
dx1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(x-x1)/alpha1^2))/u)
dx2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(x-x2)/alpha2^2))/u)
dy1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(y-y1)/alpha1^2))/u)
dy2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(y-y2)/alpha2^2))/u)
dAlpha1 <- -sum((2*lambda1*c1)*((beta1*((x-x1)^2+(y-y1)^2))/(v1^(-beta1-1)) - (v1^-beta1)/alpha1)/u)
dAlpha2 <- -sum((2*lambda2*c2)*((beta2*((x-x2)^2+(y-y2)^2))/(v1^(-beta2-1)) - (v2^-beta2)/alpha2)/u)
dBeta1 <- -sum((s1*v1^-beta1*(1-beta1*log(v1)+log*(v1)))/u)
dBeta2 <- -sum((s2*v2^-beta2*(1-beta2*log(v2)+log*(v2)))/u)
return(c(dLambda1, dx1, dy1, dAlpha1, dBeta1, dLamba2, dx2, dy2, dAlpha2, dBeta2))
}
initialParams <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1, beta = 2, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1, beta = 2)
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
derivNLLMM2MOFFAT <- function(params, x, y){
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#common expressions
u <- ((lambda1*(beta1 - 1)/(pi*alpha1^2))*(1+((x-x1)^2+(y-y1)^2)/(alpha1^2))^(-beta1)) +
((lambda2*(beta2 - 1)/(pi*alpha2^2))*(1+((x-x2)^2+(y-y2)^2)/(alpha2^2))^(-beta2))
v1 <- (1+((x-x1)^2+(y-y1)^2)/(alpha1^2))
v2 <- (1+((x-x2)^2+(y-y2)^2)/(alpha2^2))
c1 <- ((beta1 - 1)/(pi*alpha1^2))
c2 <- ((beta2 - 1)/(pi*alpha2^2))
s1 <- lambda1/(pi*alpha1^2)
s2 <- lambda2/(pi*alpha2^2)
#partial derivatives
dLamba1 <- -sum((c1*v1^-beta1)/u)
dLamba2 <- -sum((c2*v2^-beta2)/u)
dx1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(x-x1)/alpha1^2))/u)
dx2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(x-x2)/alpha2^2))/u)
dy1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(y-y1)/alpha1^2))/u)
dy2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(y-y2)/alpha2^2))/u)
dAlpha1 <- -sum((2*lambda1*c1)*((beta1*((x-x1)^2+(y-y1)^2))/(v1^(-beta1-1)) - (v1^-beta1)/alpha1)/u)
dAlpha2 <- -sum((2*lambda2*c2)*((beta2*((x-x2)^2+(y-y2)^2))/(v1^(-beta2-1)) - (v2^-beta2)/alpha2)/u)
dBeta1 <- -sum((s1*v1^-beta1*(1-beta1*log(v1)+log(v1)))/u)
dBeta2 <- -sum((s2*v2^-beta2*(1-beta2*log(v2)+log(v2)))/u)
return(c(dLambda1, dx1, dy1, dAlpha1, dBeta1, dLamba2, dx2, dy2, dAlpha2, dBeta2))
}
initialParams <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1, beta = 2, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1, beta = 2)
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
derivNLLMM2MOFFAT <- function(params, x, y){
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#common expressions
u <- ((lambda1*(beta1 - 1)/(pi*alpha1^2))*(1+((x-x1)^2+(y-y1)^2)/(alpha1^2))^(-beta1)) +
((lambda2*(beta2 - 1)/(pi*alpha2^2))*(1+((x-x2)^2+(y-y2)^2)/(alpha2^2))^(-beta2))
v1 <- (1+((x-x1)^2+(y-y1)^2)/(alpha1^2))
v2 <- (1+((x-x2)^2+(y-y2)^2)/(alpha2^2))
c1 <- ((beta1 - 1)/(pi*alpha1^2))
c2 <- ((beta2 - 1)/(pi*alpha2^2))
s1 <- lambda1/(pi*alpha1^2)
s2 <- lambda2/(pi*alpha2^2)
#partial derivatives
dLambda1 <- -sum((c1*v1^-beta1)/u)
dLambda2 <- -sum((c2*v2^-beta2)/u)
dx1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(x-x1)/alpha1^2))/u)
dx2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(x-x2)/alpha2^2))/u)
dy1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(y-y1)/alpha1^2))/u)
dy2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(y-y2)/alpha2^2))/u)
dAlpha1 <- -sum((2*lambda1*c1)*((beta1*((x-x1)^2+(y-y1)^2))/(v1^(-beta1-1)) - (v1^-beta1)/alpha1)/u)
dAlpha2 <- -sum((2*lambda2*c2)*((beta2*((x-x2)^2+(y-y2)^2))/(v1^(-beta2-1)) - (v2^-beta2)/alpha2)/u)
dBeta1 <- -sum((s1*v1^-beta1*(1-beta1*log(v1)+log(v1)))/u)
dBeta2 <- -sum((s2*v2^-beta2*(1-beta2*log(v2)+log(v2)))/u)
return(c(dLambda1, dx1, dy1, dAlpha1, dBeta1, dLambda2, dx2, dy2, dAlpha2, dBeta2))
}
initialParams <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1, beta = 2, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1, beta = 2)
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
MMresult$par
datafull[,1]
POI$1
POI$x
POI1$x
initialParams <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1, beta = 2, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1, beta = 2)
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea, y = interestArea, method = "L-BFGS-B", lower = lowerbounds)
MMresult$par
ggplot(interestArea,aes(x,y)) +
geom_point(size = 0.5)
library(here)
i_am("MultivariateMixtureModels.Rmd")
# laptop data from csv
Terzan5 <- readr::read_csv(here("Data", "Terzan 5 X-ray events.csv"), col_types = list(.default = readr::col_guess()), )
# head(Terzan5)
#fishbowl data from ODS
# library(readODS)
# Terzan5 <- read_ods(here("Raw Data.ods"), col_types = list(.default = readr::col_guess()), )
#removing extraneous columns
T5 <- data.frame(Terzan5$x, Terzan5$y)
colnames(T5) <- c('x','y')
library(ggplot2)
library(ggpointdensity)
library(viridis)
# ggplot(T5,aes(x,y)) +
#   geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
#   scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000, 10000)) +
#   coord_fixed()
library(tidyr)
library(plotly)
interestArea <- T5 %>%
filter(x>4100 & x<4150 & y>4025 & y<4075)
ggplot(interestArea,aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha = 0.683, beta = 1.9, lambda2 = 0.3, x2 = 4124, y2 = 4063, alpha = 0.5, beta = 1.9)
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult$par
initialParams <- c(lambda1 = 0.5, x1 = 0, y1 = 0, alpha = 1, beta = 2, lambda2 = 0.5, x2 = 5, y2 = 5, alpha = 1, beta = 2)
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
MMresult
MMresult$par
knitr::opts_chunk$set(echo = TRUE)
set.seed(111)
data1 <- cbind(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 0, sd = 1))
data2 <- cbind(rnorm(100, mean = 5, sd = 1), rnorm(100, mean = 5, sd = 1))
datafull <- rbind(data1, data2)
plot(data1)
plot(data2)
plot(datafull)
initParams = c(x0 = 0, y0 = 0, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result <- optim(par = initParams, fn = NLL2D, gr = deriv2DNLL, x = data1[,1], y = data1[,2], method = "L-BFGS-B", lower = lowerBounds)
result$par
initParams2 = c(x0 = 5, y0 = 5, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result2 <- optim(par = initParams, fn = NLL2D, gr = deriv2DNLL, x = data2[,1], y = data2[,2], method = "L-BFGS-B", lower = lowerBounds)
result2$par
set.seed(111)
data1 <- cbind(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 0, sd = 1))
data2 <- cbind(rnorm(100, mean = 5, sd = 1), rnorm(100, mean = 5, sd = 1))
datafull <- rbind(data1, data2)
plot(data1)
plot(data2)
plot(datafull)
initParams = c(x0 = 0, y0 = 0, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result <- optim(par = initParams, fn = NLL2D, gr = deriv2DNLL, x = data1[,1], y = data1[,2], method = "L-BFGS-B", lower = lowerBounds)
result$par
initParams2 = c(x0 = 5, y0 = 5, alpha = 1, beta = 2)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result2 <- optim(par = initParams, fn = NLL2D, gr = deriv2DNLL, x = data2[,1], y = data2[,2], method = "L-BFGS-B", lower = lowerBounds)
result2$par
set.seed(111)
data1 <- cbind(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 0, sd = 1))
data2 <- cbind(rnorm(100, mean = 5, sd = 1), rnorm(100, mean = 5, sd = 1))
datafull <- rbind(data1, data2)
plot(data1)
plot(data2)
plot(datafull)
initParams = c(x0 = 0, y0 = 0, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result <- optim(par = initParams, fn = NLL2D, gr = deriv2DNLL, x = data1[,1], y = data1[,2], method = "L-BFGS-B", lower = lowerBounds)
result$par
initParams2 = c(x0 = 5, y0 = 5, alpha = 1, beta = 2)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result2 <- optim(par = initParams, fn = NLL2D, gr = deriv2DNLL, x = data2[,1], y = data2[,2], method = "L-BFGS-B", lower = lowerBounds)
result2$par
result2
set.seed(111)
data1 <- cbind(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 0, sd = 1))
data2 <- cbind(rnorm(100, mean = 5, sd = 1), rnorm(100, mean = 5, sd = 1))
datafull <- rbind(data1, data2)
plot(data1)
plot(data2)
plot(datafull)
initParams = c(x0 = 0, y0 = 0, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result <- optim(par = initParams, fn = NLL2D, gr = deriv2DNLL, x = data1[,1], y = data1[,2], method = "L-BFGS-B", lower = lowerBounds)
result$par
initParams2 = c(x0 = 5, y0 = 5, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result2 <- optim(par = initParams2, fn = NLL2D, gr = deriv2DNLL, x = data2[,1], y = data2[,2], method = "L-BFGS-B", lower = lowerBounds)
result2$par
result2
set.seed(111)
data1 <- cbind(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 0, sd = 1))
data2 <- cbind(rnorm(100, mean = 5, sd = 1), rnorm(100, mean = 5, sd = 1))
datafull <- rbind(data1, data2)
plot(data1)
plot(data2)
plot(datafull)
initParams = c(x0 = 0, y0 = 0, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result <- optim(par = initParams, fn = NLL2D, gr = deriv2DNLL, x = data1[,1], y = data1[,2], method = "L-BFGS-B", lower = lowerBounds)
result$par
initParams2 = c(x0 = 5, y0 = 5, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result2 <- optim(par = initParams2, fn = NLL2D, gr = deriv2DNLL, x = data2[,1], y = data2[,2], method = "L-BFGS-B", lower = lowerBounds)
result2$par
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], lambda2 = 0.5, x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
set.seed(111)
data1 <- cbind(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 0, sd = 1))
data2 <- cbind(rnorm(100, mean = 5, sd = 1), rnorm(100, mean = 5, sd = 1))
datafull <- rbind(data1, data2)
plot(data1)
plot(data2)
plot(datafull)
initParams = c(x0 = 0, y0 = 0, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result <- optim(par = initParams, fn = NLL2D, gr = deriv2DNLL, x = data1[,1], y = data1[,2], method = "L-BFGS-B", lower = lowerBounds)
opt <- result$par
initParams2 = c(x0 = 5, y0 = 5, alpha = 1, beta = 1)
lowerBounds = c(0, 0, 1e-6, 1+1e-6)
result2 <- optim(par = initParams2, fn = NLL2D, gr = deriv2DNLL, x = data2[,1], y = data2[,2], method = "L-BFGS-B", lower = lowerBounds)
opt2 <- result2$par
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], lambda2 = 0.5, x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
MMresult
MMresult$par
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], lambda2 = 0.5, x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
MMresult
opt
opt2
MMresult$par
derivNLLMM2MOFFAT <- function(params, x, y){
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#common expressions
u <- ((lambda1*(beta1 - 1)/(pi*alpha1^2))*(1+((x-x1)^2+(y-y1)^2)/(alpha1^2))^(-beta1)) +
((lambda2*(beta2 - 1)/(pi*alpha2^2))*(1+((x-x2)^2+(y-y2)^2)/(alpha2^2))^(-beta2))
v1 <- (1+((x-x1)^2+(y-y1)^2)/(alpha1^2))
v2 <- (1+((x-x2)^2+(y-y2)^2)/(alpha2^2))
c1 <- ((beta1 - 1)/(pi*alpha1^2))
c2 <- ((beta2 - 1)/(pi*alpha2^2))
s1 <- lambda1/(pi*alpha1^2)
s2 <- lambda2/(pi*alpha2^2)
#partial derivatives
dLambda1 <- -sum((c1*v1^-beta1)/u)
dLambda2 <- -sum((c2*v2^-beta2)/u)
dx1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(x-x1)/alpha1^2))/u)
dx2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(x-x2)/alpha2^2))/u)
dy1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(y-y1)/alpha1^2))/u)
dy2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(y-y2)/alpha2^2))/u)
dAlpha1 <- -sum((2*lambda1*c1)*((beta1*((x-x1)^2+(y-y1)^2))/(v1^(-beta1-1)) - (v1^-beta1)/alpha1)/u)
dAlpha2 <- -sum((2*lambda2*c2)*((beta2*((x-x2)^2+(y-y2)^2))/(v1^(-beta2-1)) - (v2^-beta2)/alpha2)/u)
dBeta1 <- -sum(((s1*v1^(-beta1))*(1-beta1*log(v1)+log(v1)))/u)
dBeta2 <- -sum(((s2*v2^(-beta2))*(1-beta2*log(v2)+log(v2)))/u)
return(c(dLambda1, dx1, dy1, dAlpha1, dBeta1, dLambda2, dx2, dy2, dAlpha2, dBeta2))
}
derivNLLMM2MOFFAT <- function(params, x, y){
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#common expressions
u <- ((lambda1*(beta1 - 1)/(pi*alpha1^2))*(1+((x-x1)^2+(y-y1)^2)/(alpha1^2))^(-beta1)) +
((lambda2*(beta2 - 1)/(pi*alpha2^2))*(1+((x-x2)^2+(y-y2)^2)/(alpha2^2))^(-beta2))
v1 <- (1+(((x-x1)^2+(y-y1)^2)/(alpha1^2)))
v2 <- (1+(((x-x2)^2+(y-y2)^2)/(alpha2^2)))
c1 <- ((beta1 - 1)/(pi*alpha1^2))
c2 <- ((beta2 - 1)/(pi*alpha2^2))
s1 <- lambda1/(pi*alpha1^2)
s2 <- lambda2/(pi*alpha2^2)
#partial derivatives
dLambda1 <- -sum((c1*v1^-beta1)/u)
dLambda2 <- -sum((c2*v2^-beta2)/u)
dx1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(x-x1)/alpha1^2))/u)
dx2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(x-x2)/alpha2^2))/u)
dy1 <- -sum(((-lambda1*c1*beta1*v1^(-beta1-1))*(-2*(y-y1)/alpha1^2))/u)
dy2 <- -sum(((-lambda2*c2*beta2*v2^(-beta2-1))*(-2*(y-y2)/alpha2^2))/u)
dAlpha1 <- -sum((2*lambda1*c1)*((beta1*((x-x1)^2+(y-y1)^2))/(v1^(-beta1-1)) - (v1^-beta1)/alpha1)/u)
dAlpha2 <- -sum((2*lambda2*c2)*((beta2*((x-x2)^2+(y-y2)^2))/(v1^(-beta2-1)) - (v2^-beta2)/alpha2)/u)
dBeta1 <- -sum(((s1*v1^(-beta1))*(1-beta1*log(v1)+log(v1)))/u)
dBeta2 <- -sum(((s2*v2^(-beta2))*(1-beta2*log(v2)+log(v2)))/u)
return(c(dLambda1, dx1, dy1, dAlpha1, dBeta1, dLambda2, dx2, dy2, dAlpha2, dBeta2))
}
derivNLLMM2MOFFAT <- function(params, x, y){
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#common terms
v1 <- (1+(((x-x1)^2+(y-y1)^2)/(alpha1^2)))
v2 <- (1+(((x-x2)^2+(y-y2)^2)/(alpha2^2)))
c1 <- ((beta1 - 1)/(pi*alpha1^2))
c2 <- ((beta2 - 1)/(pi*alpha2^2))
s1 <- lambda1/(pi*alpha1^2)
s2 <- lambda2/(pi*alpha2^2)
u <- lambda1*c1*v1^(-beta1) + lambda2*c2*v2^(-beta2)
#partial derivatives
dLambda1 <- -sum((c1*v1^(-beta1))/u)
dLambda2 <- -sum((c2*v2^(-beta2))/u)
dx1 <- -sum(((2*lambda1*c1*beta1*v1^(-beta1-1))*((x-x1)/alpha1^2))/u)
dx2 <- -sum(((2*lambda2*c2*beta2*v2^(-beta2-1))*((x-x2)/alpha2^2))/u)
dy1 <- -sum(((2*lambda1*c1*beta1*v1^(-beta1-1))*((y-y1)/alpha1^2))/u)
dy2 <- -sum(((2*lambda2*c2*beta2*v2^(-beta2-1))*((y-y2)/alpha2^2))/u)
dAlpha1 <- -sum((2*lambda1*c1)*((beta1*((x-x1)^2+(y-y1)^2)/((alpha1^3)*(v1^(-beta1-1)))) - ((v1^-beta1)/alpha1))/u)
dAlpha2 <- -sum((2*lambda2*c2)*((beta2*((x-x2)^2+(y-y2)^2)/((alpha2^3)*(v2^(-beta2-1)))) - ((v2^-beta2)/alpha2))/u)
dBeta1 <- -sum(((s1*v1^(-beta1))*(1-beta1*log(v1)+log(v1)))/u)
dBeta2 <- -sum(((s2*v2^(-beta2))*(1-beta2*log(v2)+log(v2)))/u)
return(c(dLambda1, dx1, dy1, dAlpha1, dBeta1, dLambda2, dx2, dy2, dAlpha2, dBeta2))
}
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], lambda2 = 0.5, x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
MMresult
opt
opt2
MMresult$par
install.packages("optimx")
library(optimx)
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha = 0.683, beta = 1.9, lambda2 = 0.3, x2 = 4124, y2 = 4063, alpha = 0.5, beta = 1.9)
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optimx(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], lambda2 = 0.5, x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optimx(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
library(optimx)
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha = 0.683, beta = 1.9, lambda2 = 0.3, x2 = 4124, y2 = 4063, alpha = 0.5, beta = 1.9)
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
upperbounds = c(1, 100, 100, Inf, Inf, 1, 100, 100, Inf, Inf)
MMresult <- optimx(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
library(optimx)
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha = 0.683, beta = 1.9, lambda2 = 0.3, x2 = 4124, y2 = 4063, alpha = 0.5, beta = 1.9)
lowerbounds = c(0+lambda2, -100, -100, 1e-6, 1+1e-6, 0+lambda1, -100, -100, 1e-6, 1+1e-6)
MM2MOFFAT <- function(params, x, y){
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#restrictions
alpha1 <- pmax(alpha1, 1e-6)
beta1 <- pmax(beta1, 1 + 1e-6)
alpha2 <- pmax(alpha2, 1e-6)
beta2 <- pmax(beta2, 1 + 1e-6)
lambda1 <- pmin(lambda1, 1)
lambda1 <- pmax(lambda1, 1 - lambda2)
lambda2 <- pmin(lambda2, 0 + lambda1)
lambda2 <- pmax(lambda2, 1 - lambda1)
return(((lambda1*(beta1 - 1)/(pi*alpha1^2))*(1+((x-x1)^2+(y-y1)^2)/(alpha1^2))^(-beta1)) +
((lambda2*(beta2 - 1)/(pi*alpha2^2))*(1+((x-x2)^2+(y-y2)^2)/(alpha2^2))^(-beta2)))
}
library(pracma)
#test
testParams <- c(lambda1 = 0.5, x1 = 1, y1 = 4, alpha1 = 0.4, beta1 = 2, lambda2 = 0.5, x2 = 3, y2 = -2, alpha2 = 1.2, beta2 = 1.3)
MixtureIntegral <- integral2(MM2MOFFAT, xmin = -40, xmax = 40, ymin = -40, ymax = 40, params = testParams)[[1]]
MixtureIntegral
#test2
testParams2 <- c(lambda1 = 0.7, x1 = 40, y1 = 33, alpha1 = 1.2, beta1 = 1.7, lambda2 = 0.3, x2 = 3, y2 = -2, alpha2 = 1.2, beta2 = 1.3)
MixtureIntegral2 <- integral2(MM2MOFFAT, xmin = -100, xmax = 100, ymin = -100, ymax = 100, params = testParams2)[[1]]
MixtureIntegral2
#test3
testParams3 <- c(lambda1 = 0.55, x1 = 0, y1 = 0, alpha1 = 1.2, beta1 = 2, lambda2 = 0.45, x2 = 2, y2 = 2, alpha2 = 1.2, beta2 = 2)
MixtureIntegral3 <- integral2(MM2MOFFAT, xmin = -50, xmax = 50, ymin = -50, ymax = 50, params = testParams3)[[1]]
MixtureIntegral3
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], lambda2 = 0.5, x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
MMresult <- optimx(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], lambda2 = 0.5, x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
upperbounds = c(1, 100, 100, Inf, Inf, 1, 100, 100, Inf, Inf)
MMresult <- optimx(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], lambda2 = 0.5, x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
upperbounds = c(1, 100, 100, Inf, Inf, 1, 100, 100, Inf, Inf)
MMresult <- optimx(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "spg", lower = lowerbounds)
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], lambda2 = 0.5, x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
upperbounds = c(1, 100, 100, Inf, Inf, 1, 100, 100, Inf, Inf)
MMresult <- optimx(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "spg", lower = lowerbounds, upper = upperbounds)
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha = opt[[3]], beta = opt[[4]], lambda2 = 0.5, x2 = opt2[[1]], y2 = opt2[[2]], alpha = opt2[[3]], beta = opt2[[3]])
lowerbounds = c(0, -100, -100, 1e-6, 1+1e-6, 0, -100, -100, 1e-6, 1+1e-6)
upperbounds = c(1, 100, 100, Inf, Inf, 1, 100, 100, Inf, Inf)
MMresult <- optimx(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
