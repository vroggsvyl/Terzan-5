1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(maxit = 150))
MMresult4
out4 <- MMresult4$par
out4[[1]] + out4[[6]] + out4[[11]]
out3
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4128, y4 = 4064, alpha4 = 0.5, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(maxit = 200))
MMresult4
out4 <- MMresult4$par
out4[[1]] + out4[[6]] + out4[[11]]
xRange <- seq(4100, 4140, length = 200)
yRange <- seq(4035, 4075, length = 200)
grid <- expand.grid(x = xRange, y = yRange)
opt4params <- c(out4[1:15],
1 - out4[[1]] - out4[[6]] - out4[[11]], out3[16:19]
)
zMM4 <- MM4MOFFATimage(grid, params = opt4params)
zmat4 <- matrix(zMM4, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, log10(zmat4), xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = log10(zMM4)), bins = 10) +
coord_fixed()
contours
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
opt4params <- c(out4[1:15],
1 - out4[[1]] - out4[[6]] - out4[[11]], out4[16:19]
)
zMM4 <- MM4MOFFATimage(grid, params = opt4params)
zmat4 <- matrix(zMM4, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, log10(zmat4), xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = log10(zMM4)), bins = 10) +
coord_fixed()
contours
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4129, y4 = 4073, alpha4 = 0.5, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4129, y4 = 4073, alpha4 = 0.5, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4129.5, y4 = 4072.5, alpha4 = 0.5, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4129.5, y4 = 4072.5, alpha4 = 0.7, beta4 = 1.3
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4129.5, y4 = 4072.5, alpha4 = 0.4, beta4 = 1.1
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4129.5, y4 = 4072.5, alpha4 = 0.6, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4130, y4 = 4072.5, alpha4 = 0.6, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4130, y4 = 4072.5, alpha4 = 0.6, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(trace = 6, maxit = 200))
#use optimised parameters from 4 sources
initialParams5 <- c(lambda1 = out4[[1]], x1 = out4[[2]], y1 = out4[[3]], alpha1 = out4[[4]], beta1 = out4[[5]],
lambda2 = out4[[6]], x2 = out4[[7]], y2 = out4[[8]], alpha2 = out4[[9]], beta2 = out3[[10]],
lambda3 = out4[[11]], x3 = out4[[12]], y3 = out4[[13]], alpha3 = out4[[14]], beta3 = out4[[15]],
lambda4 = 0.02, x4 = out4[[16]], y4 = out4[[17]], alpha4 = out4[[18]], beta4 = out4[[19]],
x5 = 4129, y5 = 4073, alpha5 = 0.5, beta5 = 1.2
)
MM5MOFFAT(initialParams5, xRange, yRange)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult5 <- optim(par = initialParams5, fn = MM5MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(trace = 6))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4130, y4 = 4072.5, alpha4 = 0.6, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(trace = 3, maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4130, y4 = 4072.5, alpha4 = 0.6, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(trace = 4, maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4130, y4 = 4072.5, alpha4 = 0.6, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(trace = 3, ndeps = 3, maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4130, y4 = 4072.5, alpha4 = 0.6, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(trace = 3, ndeps = 1e-4, maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4130, y4 = 4072.5, alpha4 = 0.6, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(trace = 3, maxit = 200))
#use optimised parameters from 3 sources
initialParams4 <- c(lambda1 = out3[[1]], x1 = out3[[2]], y1 = out3[[3]], alpha1 = out3[[4]], beta1 = out3[[5]],
lambda2 = out3[[6]], x2 = out3[[7]], y2 = out3[[8]], alpha2 = out3[[9]], beta2 = out3[[10]],
lambda3 = 0.1, x3 = out3[[11]], y3 = out3[[12]], alpha3 = out3[[13]], beta3 = out3[[14]],
x4 = 4130, y4 = 4073, alpha4 = 0.6, beta4 = 1.2
)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult4.2 <- optim(par = initialParams4, fn = MM4MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds, control = list(trace = 3, maxit = 200))
MMresult4.2
out4.2 <- MMresult4.2$par
out4.2[[1]] + out4.2[[6]] + out4.2[[11]]
opt4.2params <- c(out4.2[1:15],
1 - out4.2[[1]] - out4.2[[6]] - out4.2[[11]], out4.2[16:19]
)
zMM4.2 <- MM4MOFFATimage(grid, params = opt4.2params)
zmat4.2 <- matrix(zMM4.2, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, log10(zmat4.2), xlab = "x", ylab = "y", main = "2D Moffat")
contours4.2 <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = log10(zMM4.2)), bins = 10) +
coord_fixed()
contours4.2
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData4.2 <- ggplot_build(contours4.2)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel +
geom_path(data = MMcontourData4.2, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
opt4.2params <- c(out4.2[1:15],
1 - out4.2[[1]] - out4.2[[6]] - out4.2[[11]], out4.2[16:19]
)
zMM4.2 <- MM4MOFFATimage(grid, params = opt4.2params)
zmat4.2 <- matrix(zMM4.2, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, log10(zmat4.2), xlab = "x", ylab = "y", main = "2D Moffat")
contours4.2 <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = log10(zMM4.2)), bins = 10) +
coord_fixed()
contours4.2
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData4.2 <- ggplot_build(contours4.2)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel +
geom_path(data = MMcontourData4.2, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) +
geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "blue", alpha = 0.5)
MMcombined
#use optimised parameters from 4 sources
initialParams5 <- c(lambda1 = out4[[1]], x1 = out4[[2]], y1 = out4[[3]], alpha1 = out4[[4]], beta1 = out4[[5]],
lambda2 = out4[[6]], x2 = out4[[7]], y2 = out4[[8]], alpha2 = out4[[9]], beta2 = out3[[10]],
lambda3 = out4[[11]], x3 = out4[[12]], y3 = out4[[13]], alpha3 = out4[[14]], beta3 = out4[[15]],
lambda4 = 0.02, x4 = out4[[16]], y4 = out4[[17]], alpha4 = out4[[18]], beta4 = out4[[19]],
x5 = out4.2[[16]], y5 = out4.2[[17]], alpha5 = out4.2[[18]], beta5 = out4.2[[19]]
)
MM5MOFFAT(initialParams5, xRange, yRange)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult5 <- optim(par = initialParams5, fn = MM5MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(trace = 6))
#use optimised parameters from 4 sources
initialParams5 <- c(lambda1 = out4[[1]], x1 = out4[[2]], y1 = out4[[3]], alpha1 = out4[[4]], beta1 = out4[[5]],
lambda2 = out4[[6]], x2 = out4[[7]], y2 = out4[[8]], alpha2 = out4[[9]], beta2 = out3[[10]],
lambda3 = out4[[11]], x3 = out4[[12]], y3 = out4[[13]], alpha3 = out4[[14]], beta3 = out4[[15]],
lambda4 = 0.01, x4 = out4[[16]], y4 = out4[[17]], alpha4 = out4[[18]], beta4 = out4[[19]],
x5 = out4.2[[16]], y5 = out4.2[[17]], alpha5 = out4.2[[18]], beta5 = out4.2[[19]]
)
MM5MOFFAT(initialParams5, xRange, yRange)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult5 <- optim(par = initialParams5, fn = MM5MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(trace = 6))
MMresult5
out5 <- MMresult5$par
#use optimised parameters from 4 sources
initialParams5 <- c(lambda1 = out4[[1]], x1 = out4[[2]], y1 = out4[[3]], alpha1 = out4[[4]], beta1 = out4[[5]],
lambda2 = out4[[6]], x2 = out4[[7]], y2 = out4[[8]], alpha2 = out4[[9]], beta2 = out3[[10]],
lambda3 = out4[[11]], x3 = out4[[12]], y3 = out4[[13]], alpha3 = out4[[14]], beta3 = out4[[15]],
lambda4 = 0.01, x4 = out4[[16]], y4 = out4[[17]], alpha4 = out4[[18]], beta4 = out4[[19]],
x5 = out4.2[[16]], y5 = out4.2[[17]], alpha5 = out4.2[[18]], beta5 = out4.2[[19]]
)
MM5MOFFAT(initialParams5, xRange, yRange)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
0, 3000, 3000, 1e-6, 1+1e-6,
3000, 3000, 1e-6, 1+1e-6
)
upperbounds = c(1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
1, 5000, 5000, Inf, Inf,
5000, 5000, Inf, Inf
)
MMresult5 <- optim(par = initialParams5, fn = MM5MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)#, control = list(trace = 6))
MMresult5
out5 <- MMresult5$par
out5[[1]] + out5[[6]] + out5[[11]] + out5[[16]]
opt5params <- c(out5[1:20],
1 - out5[[1]] - out5[[6]] - out5[[11]] - out5[[16]], out5[21:24]
)
zMM5 <- MM5MOFFATimage(grid, params = opt5params)
zmat5 <- matrix(zMM5, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, log10(zmat5), xlab = "x", ylab = "y", main = "2D Moffat")
contours5 <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = log10(zMM5)), bins = 10) +
coord_fixed()
contours5
interestAreaModel
MMcontourData5 <- ggplot_build(contours5)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel +
geom_path(data = MMcontourData5, aes(x = x, y = y, group = group), color = "green", alpha = 0.5) +
geom_path(data = MMcontourData4.2, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) +
geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "blue", alpha = 0.5)
MMcombined
opt5params <- c(out5[1:20],
1 - out5[[1]] - out5[[6]] - out5[[11]] - out5[[16]], out5[21:24]
)
zMM5 <- MM5MOFFATimage(grid, params = opt5params)
zmat5 <- matrix(zMM5, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, log10(zmat5), xlab = "x", ylab = "y", main = "2D Moffat")
contours5 <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = log10(zMM5)), bins = 10) +
coord_fixed()
contours5
interestAreaModel
MMcontourData5 <- ggplot_build(contours5)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel +
geom_path(data = MMcontourData5, aes(x = x, y = y, group = group), color = "green", alpha = 0.5) #+
# geom_path(data = MMcontourData4.2, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) +
# geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "blue", alpha = 0.5)
MMcombined
opt5params <- c(out5[1:20],
1 - out5[[1]] - out5[[6]] - out5[[11]] - out5[[16]], out5[21:24]
)
zMM5 <- MM5MOFFATimage(grid, params = opt5params)
zmat5 <- matrix(zMM5, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, log10(zmat5), xlab = "x", ylab = "y", main = "2D Moffat")
contours5 <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = log10(zMM5)), bins = 10) +
coord_fixed()
contours5
interestAreaModel
MMcontourData5 <- ggplot_build(contours5)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel +
geom_path(data = MMcontourData5, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) #+
# geom_path(data = MMcontourData4.2, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) +
# geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "blue", alpha = 0.5)
MMcombined
opt5params <- c(out5[1:20],
1 - out5[[1]] - out5[[6]] - out5[[11]] - out5[[16]], out5[21:24]
)
zMM5 <- MM5MOFFATimage(grid, params = opt5params)
zmat5 <- matrix(zMM5, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, log10(zmat5), xlab = "x", ylab = "y", main = "2D Moffat")
contours5 <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = log10(zMM5)), bins = 10) +
coord_fixed()
contours5
interestAreaModel
MMcontourData5 <- ggplot_build(contours5)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel +
geom_path(data = MMcontourData5, aes(x = x, y = y, group = group), color = "blue", alpha = 0.5) #+
# geom_path(data = MMcontourData4.2, aes(x = x, y = y, group = group), color = "red", alpha = 0.5) +
# geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "blue", alpha = 0.5)
MMcombined
