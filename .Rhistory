#Compare optimised parameters of the individual clusters to the mixture model
opt
opt2
out <- MMresult$par
out
#Optimise Mixture Model
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
#Check for convergence
MMresult
#Compare optimised parameters of the individual clusters to the mixture model
opt
opt2
out <- MMresult$par
out
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
#Set the initial parameters for the Mixture Model, use the optimised parameters from the individual clusters
initialParams <- c(lambda1 = 0.5, x1 = opt[[1]], y1 = opt[[2]], alpha1 = opt[[3]], beta1 = opt[[4]], x2 = opt2[[1]], y2 = opt2[[2]], alpha2 = opt2[[3]], beta2 = opt2[[3]])
#The set the bounds for the Mixture Model, some of these are just arbitrary high numbers.
lowerbounds = c(1e-6, -100, -100, 1e-6, 1+1e-6, -100, -100, 1e-6, 1+1e-6)
upperbounds = c(1, 100, 100, 100, 100, 100, 100, 100, 100)
#Optimise Mixture Model
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = datafull[,1], y = datafull[,2], method = "L-BFGS-B", lower = lowerbounds)
#Check for convergence
MMresult
#Compare optimised parameters of the individual clusters to the mixture model
opt
opt2
out <- MMresult$par
out
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
xRange <- seq(4110, 4130, length = 100)
yRange <- seq(4045, 4065, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
MM2MOFFATimage <- function(grid, params){
x <- grid[[1]]
y <- grid[[2]]
#component density 1
lambda1 <- params[[1]]
x1 <- params[[2]]
y1 <- params[[3]]
alpha1 <- params[[4]]
beta1 <- params[[5]]
#component density 2
lambda2 <- params[[6]]
x2 <- params[[7]]
y2 <- params[[8]]
alpha2 <- params[[9]]
beta2 <- params[[10]]
#restrictions
alpha1 <- pmax(alpha1, 1e-6)
beta1 <- pmax(beta1, 1 + 1e-6)
alpha2 <- pmax(alpha2, 1e-6)
beta2 <- pmax(beta2, 1 + 1e-6)
lambda1 <- pmin(lambda1, 1)
lambda1 <- pmax(lambda1, 1 - lambda2)
lambda2 <- pmin(lambda2, 0 + lambda1)
lambda2 <- pmax(lambda2, 1 - lambda1)
c1 <- (beta1 - 1)/(pi*alpha1^2)
c2 <- (beta2 - 1)/(pi*alpha2^2)
v1 <- 1+(((x-x1)^2+(y-y1)^2)/alpha1^2)
v2 <- 1+(((x-x2)^2+(y-y2)^2)/alpha2^2)
return(lambda1*c1*v1^(-beta1) +
lambda2*c2*v2^(-beta2))
}
xRange <- seq(4110, 4130, length = 100)
yRange <- seq(4045, 4065, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
initialParams <- c(lambda1 = 0.5, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.6, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.8, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S2$x), y1 = mean(interestArea2S2$y), alpha1 = 0.5, beta1 = 1.9, x2 = mean(interestArea2S1$x), y2 = mean(interestArea2S1$y), alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S2$x), y1 = mean(interestArea2S2$y), alpha1 = 0.5, beta1 = 1.9, x2 = mean(interestArea2S1$x), y2 = mean(interestArea2S1$y), alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
contours
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_point(size = 0.5, shape = "1") +
coord_fixed()
interestArea2Model2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
#This is an image of the mixture model with the optimised results
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
#this is the data
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
# interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
#   geom_point(size = 0.5, shape = "1") +
#   coord_fixed()
#
# interestArea2Model2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
#this is the contours of the model overlayed on the data
MMcombined
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
#This is an image of the mixture model with the optimised results
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
contours
#this is the data
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
# interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
#   geom_point(size = 0.5, shape = "1") +
#   coord_fixed()
#
# interestArea2Model2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
#this is the contours of the model overlayed on the data
MMcombined
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
#This is an image of the mixture model with the optimised results
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 8) +
coord_fixed()
contours
#this is the data
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
# interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
#   geom_point(size = 0.5, shape = "1") +
#   coord_fixed()
#
# interestArea2Model2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
#this is the contours of the model overlayed on the data
MMcombined
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
#This is an image of the mixture model with the optimised results
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 6) +
coord_fixed()
contours
#this is the data
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
# interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
#   geom_point(size = 0.5, shape = "1") +
#   coord_fixed()
#
# interestArea2Model2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
#this is the contours of the model overlayed on the data
MMcombined
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S2$x), y1 = mean(interestArea2S2$y), alpha1 = 0.5, beta1 = 1.9, x2 = mean(interestArea2S1$x), y2 = mean(interestArea2S1$y), alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S2$x), y1 = mean(interestArea2S2$y), alpha1 = 0.5, beta1 = 1.9, x2 = mean(interestArea2S1$x), y2 = mean(interestArea2S1$y), alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
#This is an image of the mixture model with the optimised results
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 6) +
coord_fixed()
contours
#this is the data
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
# interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
#   geom_point(size = 0.5, shape = "1") +
#   coord_fixed()
#
# interestArea2Model2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
#this is the contours of the model overlayed on the data
MMcombined
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S2$x), y1 = mean(interestArea2S2$y), alpha1 = 0.5, beta1 = 1.9, x2 = mean(interestArea2S1$x), y2 = mean(interestArea2S1$y), alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
xRange <- seq(4105, 4135, length = 100)
yRange <- seq(4160, 4190, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
#This is an image of the mixture model with the optimised results
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 6) +
coord_fixed()
contours
#this is the data
interestArea2Model <- ggplot(interestArea2, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestArea2Model
# interestArea2Model2 <- ggplot(interestArea2, aes(x = x, y = y)) +
#   geom_point(size = 0.5, shape = "1") +
#   coord_fixed()
#
# interestArea2Model2
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestArea2Model + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
#this is the contours of the model overlayed on the data
MMcombined
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S2$x), y1 = mean(interestArea2S2$y), alpha1 = 0.5, beta1 = 1.9, x2 = mean(interestArea2S1$x), y2 = mean(interestArea2S1$y), alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S2$x), y1 = mean(interestArea2S2$y), alpha1 = 0.5, beta1 = 1.9, x2 = mean(interestArea2S1$x), y2 = mean(interestArea2S1$y), alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.5, x1 = mean(interestArea2S2$x), y1 = mean(interestArea2S2$y), alpha1 = 0.5, beta1 = 1.9, x2 = mean(interestArea2S1$x), y2 = mean(interestArea2S1$y), alpha2 = 0.5, beta2 = 1.9)
lowerbounds = c(0, 3900, 3900, 1e-6, 1+1e-6, 3900, 3900, 1e-6, 1+1e-6)
upperbounds = c(1, 4400, 4400, Inf, Inf, 4400, 4400, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea2$x, y = interestArea2$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
xRange <- seq(4110, 4130, length = 100)
yRange <- seq(4045, 4065, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
xRange <- seq(4110, 4130, length = 100)
yRange <- seq(4045, 4065, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
xRange <- seq(4110, 4130, length = 100)
yRange <- seq(4045, 4065, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds, upper = upperbounds)
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT,  x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
initialParams <- c(lambda1 = 0.7, x1 = 4115.261, y1 = 4051.904, alpha1 = 0.683, beta1 = 1.9, x2 = 4124, y2 = 4063, alpha2 = 0.5, beta2 = 1.9)
#the initial parameters for the first component density are the optimal parameters when testing the 2D Moffat Model on an individual source.
lowerbounds = c(0, 3000, 3000, 1e-6, 1+1e-6, 3000, 3000, 1e-6, 1+1e-6)
upperbounds = c(1, 5000, 5000, Inf, Inf, 5000, 5000, Inf, Inf)
MMresult <- optim(par = initialParams, fn = NLLMM2MOFFAT, gr = derivNLLMM2MOFFAT, x = interestArea$x, y = interestArea$y, method = "L-BFGS-B", lower = lowerbounds)
MMresult
out <- MMresult$par
xRange <- seq(4110, 4130, length = 100)
yRange <- seq(4045, 4065, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
oparams <- c(out[[1]], out[[2]], out[[3]], out[[4]], out[[5]], 1-out[[1]], out[[6]], out[[7]], out[[8]], out[[9]])
zMM <- MM2MOFFATimage(grid, params = oparams)
zmat <- matrix(zMM, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zmat, xlab = "x", ylab = "y", main = "2D Moffat")
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zMM), bins = 10) +
coord_fixed()
interestAreaModel <- ggplot(interestArea, aes(x = x, y = y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
interestAreaModel
MMcontourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
MMcombined <- interestAreaModel + geom_path(data = MMcontourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
MMcombined
