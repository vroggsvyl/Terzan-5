# Terzan5 <- readr::read_csv(here("Data", "Terzan 5 X-ray events.csv"), col_types = list(.default = readr::col_guess()), )
# head(Terzan5)
#fishbowl data from ODS
library(readODS)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(ggpointdensity)
library(viridis)
library(tidyr)
library(ggExtra)
library(ggpubr)
library(cowplot)
library(pracma)
## Color pallete
cbPalette <- c("#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
library(here)
i_am("2D Moffat.Rmd")
# laptop data from csv
Terzan5 <- readr::read_csv(here("Data", "Terzan 5 X-ray events.csv"), col_types = list(.default = readr::col_guess()), )
# head(Terzan5)
#fishbowl data from ODS
# library(readODS)
# Terzan5 <- read_ods(here("Raw Data.ods"), col_types = list(.default = readr::col_guess()), )
#removing extraneous columns
T5 <- data.frame(Terzan5$x, Terzan5$y)
colnames(T5) <- c('x','y')
#filtering into two Points of Interest
POI1 <- T5 %>%
filter(x>4160 & x<4180 & y>4180 & y<4200)
POI2 <- T5 %>%
filter(x>4105 & x< 4125 & y>4040 & y<4060)
Moffat2D <- function(grid, parameters){
x <- grid[[1]]
y <- grid[[2]]
amplitude <- parameters[[1]]
x0 <- parameters[[2]]
y0 <- parameters[[3]]
alpha <- parameters[[4]]
beta <- parameters[[5]]
amplitude*(1+((x - x0)^2 + (y - y0)^2)/alpha^2)^(-beta)
}
#grid of variables
xRange <- seq(-5, 5, length = 100)
yRange <- seq(-5, 5, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
#Dummy parameters
dummyParams <- c(amplitude = 1, x0 = 0, y0 = 0, alpha = 1, beta = 1)
z <- Moffat2D(grid, dummyParams)
zMatrix <- matrix(z, nrow = length(xRange), ncol = length(yRange))
image(xRange, yRange, zMatrix, xlab = "x", ylab = "y", main = "2D Moffat")
persp(xRange, yRange, zMatrix, xlab = "x", ylab = "y", zlab = "f(x,y)", main = "2D Moffat")
#baseline of 1,0,0,1,1
dummyParams <- c(amplitude = 1, x0 = 0, y0 = 0, alpha = 1, beta = 1)
dummyParams1 <- c(amplitude = 4, x0 = 0, y0 = 0, alpha = 1, beta = 1)
dummyParams2 <- c(amplitude = 1, x0 = 3, y0 = 0, alpha = 1, beta = 1)
dummyParams3 <- c(amplitude = 1, x0 = 0, y0 = -2, alpha = 1, beta = 1)
dummyParams4 <- c(amplitude = 1, x0 = 0, y0 = 0, alpha = 3, beta = 1)
dummyParams5 <- c(amplitude = 1, x0 = 0, y0 = 0, alpha = 1, beta = 2.6)
#baseline plot
z <- Moffat2D(grid, dummyParams)
zMatrix <- matrix(z, nrow = length(xRange), ncol = length(yRange))
image(xRange, yRange, zMatrix, xlab = "x", ylab = "y", main = "2D Moffat")
#increasing amplitude
z1 <- Moffat2D(grid, dummyParams1)
z1Matrix <- matrix(z, nrow = length(xRange), ncol = length(yRange))
image(xRange, yRange, z1Matrix, xlab = "x", ylab = "y", main = "2D Moffat - Increasing A")
#moving x0
z2 <- Moffat2D(grid, dummyParams2)
z2Matrix <- matrix(z2, nrow = length(xRange), ncol = length(yRange))
image(xRange, yRange, z2Matrix, xlab = "x", ylab = "y", main = "2D Moffat - Moving x0")
#moving y0
z3 <- Moffat2D(grid, dummyParams3)
z3Matrix <- matrix(z3, nrow = length(xRange), ncol = length(yRange))
image(xRange, yRange, z3Matrix, xlab = "x", ylab = "y", main = "2D Moffat - Moving y0")
#Increasing alpha
z4 <- Moffat2D(grid, dummyParams4)
z4Matrix <- matrix(z4, nrow = length(xRange), ncol = length(yRange))
image(xRange, yRange, z4Matrix, xlab = "x", ylab = "y", main = "2D Moffat - Increasing alpha")
#Increasing beta
z5<- Moffat2D(grid, dummyParams5)
z5Matrix <- matrix(z5, nrow = length(xRange), ncol = length(yRange))
image(xRange, yRange, z5Matrix, xlab = "x", ylab = "y", main = "2D Moffat - Increasing beta")
persp(xRange, yRange, zMatrix, xlab = "x", ylab = "y", main = "2D Moffat")
persp(xRange, yRange, z1Matrix, xlab = "x", ylab = "y", main = "2D Moffat - Increasing A")
NLL <- function(grid, parameters){
predictedDens <- Moffat2D(grid, parameters)
return(-sum(log(predictedDens)))
}
#changing the value of the amplitude
amplitude <- seq(0.25, 5, by = 0.25)
i <- 1
changingA <- vector("numeric", length = 20)
while(i<=20){
parameters <- c(amplitude[[i]], 1, 1, 1, 1)
grid <- c(0,0)
changingA[i] <- (NLL(grid, parameters))
i <- i+1
}
#changing the value of x0
x0 <- seq(-5, 5, by = 0.5)
i <- 1
changingx0 <- vector("numeric", length = 21)
while(i<=21){
parameters <- c(1, x0[[i]], 1, 1, 1)
grid <- c(0,0)
changingx0[i] <- (NLL(grid, parameters))
i <- i+1
}
#changing the value of y0
y0 <- seq(-5, 5, by = 0.5)
i <- 1
changingy0 <- vector("numeric", length = 21)
while(i<=21){
parameters <- c(1, 1, y0[[i]], 1, 1)
grid <- c(0,0)
changingy0[i] <- (NLL(grid, parameters))
i <- i+1
}
#changing the value of alpha
alpha <- seq(0.25, 10, by = 0.25)
i <- 1
changingAlpha <- vector("numeric", length = 40)
while(i<=40){
parameters <- c(1, 1, 1, alpha[[i]], 1)
grid <- c(0,0)
changingAlpha[i] <- (NLL(grid, parameters))
i <- i+1
}
#changing the value of beta
beta <- seq(0.25, 10, by = 0.25)
i <- 1
changingBeta <- vector("numeric", length = 40)
while(i<=40){
parameters <- c(1, 1, 1, 1, beta[[i]])
grid <- c(0,0)
changingBeta[i] <- (NLL(grid, parameters))
i <- i+1
}
par(mfrow = c(2,3))
plot(amplitude, changingA, type = "l", xlab = "Amplitude", ylab = "Negative Log Likelihood")
plot(x0, changingx0, type = "l", xlab = "x0", ylab = "Negative Log Likelihood")
plot(y0, changingy0, type = "l", xlab = "x0", ylab = "Negative Log Likelihood")
plot(alpha, changingAlpha, type = "l", xlab = "Alpha", ylab = "Negative Log Likelihood")
plot(beta, changingBeta, type = "l", xlab = "Beta", ylab = "Negative Log Likelihood")
Moffat2DPDF <- function(parameters, x, y){
x0 <- parameters[[1]]
y0 <- parameters[[2]]
alpha <- parameters[[3]]
beta <- parameters[[4]]
alpha <- pmax(alpha, 1e-6)
beta <- pmax(beta, 1 + 1e-6)
return(((beta-1)/(pi*alpha^2))*(1+((x - x0)^2 + (y - y0)^2)/alpha^2)^(-beta))
}
library(pracma)
#Test 1
T1Params <- c(x0 = 1, y0 = 4, alpha = 0.4, beta = 2)
MoffatIntegral2D1 <- integral2(Moffat2DPDF, xmin = -100, xmax = 100, ymin = -100, ymax = 100, parameters = T1Params)[[1]]
MoffatIntegral2D1
#Test 2
T2Params <- c(x0 = -3, y0 = 7, alpha = 1.2, beta = 1.3)
MoffatIntegral2D2 <- integral2(Moffat2DPDF, xmin = -100, xmax = 100, ymin = -100, ymax = 100, parameters = T2Params)[[1]]
MoffatIntegral2D2
#Test 3
T3Params <- c(x0 = 4, y0 = 0, alpha = 3, beta = 2.4)
MoffatIntegral2D3 <- integral2(Moffat2DPDF, xmin = -100, xmax = 100, ymin = -100, ymax = 100, parameters = T3Params)[[1]]
MoffatIntegral2D3
xRange <- seq(-20, 20, length = 200)
yRange <- seq(-20, 20, length = 200)
grid <- expand.grid(xRange, yRange)
A1 <- (T1Params[[4]]-1)/(pi * T1Params[[3]])
zT1 <- Moffat2D(grid, parameters = c(A1, T1Params))
zT1Matrix <- matrix(zT1, nrow = length(xRange), ncol = length(yRange))
image(xRange, yRange, zT1Matrix)
A2 <- (T2Params[[4]]-1)/(pi * T2Params[[3]])
zT2 <- Moffat2D(grid, parameters = c(A2, T2Params))
zT2Matrix <- matrix(zT2, nrow = length(xRange), ncol = length(yRange))
image(xRange, yRange, zT2Matrix)
A3 <- (T3Params[[4]]-1)/(pi * T3Params[[3]])
zT3 <- Moffat2D(grid, parameters = c(A3, T3Params))
zT3Matrix <- matrix(zT3, nrow = length(xRange), ncol = length(yRange))
image(xRange, yRange, zT3Matrix)
NLL2D <- function(parameters, x, y){
predictedDens <- Moffat2DPDF(parameters, x, y)
return(-sum(log(predictedDens)))
}
deriv2DNLL <- function(parameters, x, y){
x0 <- parameters[[1]]
y0 <- parameters[[2]]
alpha <- parameters[[3]]
beta <- parameters[[4]]
dx0 <- -sum((2*beta*(x-x0))/(alpha^2 + (x-x0)^2 + (y-y0)^2))
dy0 <- -sum((2*beta*(y-y0))/(alpha^2 + (x-x0)^2 + (y-y0)^2))
dAlpha <- 2*sum(1/alpha + (beta*((x-x0)^2 + (y-y0)^2))/(alpha^3 + alpha*((x-x0)^2 + (y-y0)^2)))
dBeta <- -sum(1/beta - log(1+((x-x0)^2 + (y-y0)^2)/alpha^2))
return(c(dx0, dy0, dAlpha, dBeta))
}
mean(POI1$x)
mean(POI1$y)
initGuess <- c(x0 = mean(POI1$x), y0 = mean(POI1$y), alpha = 1, beta = 2)
lowerBounds <- c(0, 0, 1e-6, 1+1e-6)
resultPOI1 <- optim(par = initGuess, fn = NLL2D, gr = deriv2DNLL, x = POI1$x, y = POI1$y, method = "L-BFGS-B", lower = lowerBounds)
resultPOI1
optimPOI1Par <- resultPOI1$par
optimPOI1Par
xRange <- seq(4160, 4180, length = 100)
yRange <- seq(4180, 4200, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimPOI1Par[[4]]-1)/(pi*optimPOI1Par[[3]]^2)
parameters <- c(amplitude, optimPOI1Par)
zPOI1<- Moffat2D(grid, parameters)
zPOI1Matrix <- matrix(zPOI1, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zPOI1Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
model <- ggplot(POI1, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contours <- ggplot(grid, aes(x = x, y = y)) +
stat_contour(aes(z = zPOI1), bins = 10) +
coord_fixed()
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]] #extracting the contours (from the optimised function)
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
library(ggExtra)
#refiltering the POI1
POI1ZOOM <- POI1 %>%
filter(x>4167 & x<4177 & y>4183 & y<4193)
#creating a point density plot
modelZoomedInPOI1 <- ggplot(POI1ZOOM, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contourData <- ggplot_build(contours)$data[[1]]
#combining the contour plot and the point density plot
combined <- modelZoomedInPOI1 + geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[5], alpha = 1, linewidth= 0.3)
#viewing
ggMarginal(combined, type = "histogram")
#plotting contours on the raw data
ggplot(POI1ZOOM, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
mean(POI2$x)
mean(POI2$y)
initGuess <- c(x0 = 4115.227, y0 = 4052.706, alpha = 1, beta = 2)
result2D <- optim(par = initGuess, fn = NLL2D, gr = deriv2DNLL, x = POI2$x, y = POI2$y, method = "L-BFGS-B", lower = lowerBounds)
result2D
optimPOI2Par <- result2D$par
optimPOI2Par
#check, the area under the curve should be equal to 1.
integral2(Moffat2DPDF, xmin = 3000, xmax = 5000, ymin = 3000, ymax = 5000, parameters = optimPOI2Par)[[1]]
#maximum amplitude
Moffat2DPDF(optimPOI2Par, 4115.26, 4051.90)
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4045, 4055, length = 100)
grid <- expand.grid(x = xRange, y = yRange)
amplitude <- (optimPOI2Par[[4]]-1)/(pi*optimPOI2Par[[3]]^2)
#amplitude
parameters <- c(amplitude, optimPOI2Par)
zPOI2<- Moffat2D(grid, parameters)
zPOI2Matrix <- matrix(zPOI2, nrow = length(xRange), ncol = length(yRange))
par(pty = "s")
image(xRange, yRange, zPOI2Matrix, xlab = "x", ylab = "y", main = "2D Moffat")
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4045, 4055, length = 100)
data <- expand.grid(x = xRange, y = yRange)
model <- ggplot(POI2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
theme(legend.position = "none")
contours <- ggplot(data, aes(x = x, y = y)) +
stat_contour(aes(z = zPOI2), bins = 10)
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
#refiltering the POI2
POI2ZOOM <- POI2 %>%
filter(x>4110 & x<4120 & y>4048 & y<4058)
#creating a point density plot
modelZoomedInPOI2 <- ggplot(POI2ZOOM, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
coord_fixed()
contourData <- ggplot_build(contours)$data[[1]]
#combining the contour plot and the point density plot
combined <- modelZoomedInPOI2 + geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[5], alpha = 1, linewidth= 0.3)
#viewing
ggMarginal(combined, type = "histogram")
#plotting contours on the raw data
ggplot(POI2ZOOM, aes(x,y)) +
geom_point(size = 0.2) +
geom_path(data = contourData, aes(x = x, y = y, group = group), color = cbPalette[2], alpha = 1) +
coord_fixed()
combined + coord_cartesian(xlim = c(4110, 4120), ylim = c(4048, 4058))
xRange <- seq(4105, 4125, length = 200)
yRange <- seq(4040, 4060, length = 200)
data <- expand.grid(x = xRange, y = yRange)
#for all values within the above grid, apply the 2D Moffat PDF function with the optimised parameters. This will generate a grid of values. Where X is rows and Y are columns
jointPDFValues <- outer(X = xRange, Y = yRange, Moffat2DPDF, parameters = optimPOI2Par)
#check
tot <- sum(jointPDFValues)
#To obtain the marginal PDFS, I need to integrate the joint function with respect to one of the variables.
#Instead I sum up all the values in each row. This has the effect of integrating with respect to y. As I take the value from each position over the range.
marginalX <- apply(jointPDFValues, 1, sum)
marginalY <- apply(jointPDFValues, 2, sum)
data.frame(xRange, marginalX)
#checks - the sum of each marginal distribution should equal the sum of the whole area.
sum(marginalX)
sum(marginalY)
plot(xRange, marginalX, type = "l", xlab = "x", ylab = "Density", main = "Marginal PDF of x")
plot(yRange, marginalY, type = "l", xlab = "y", ylab = "Density", main = "Marginal PDF of y")
xRange <- seq(4105, 4125, length = 200)
yRange <- seq(4040, 4060, length = 200)
Rx <- length(xRange) - 1
Ry <- length(yRange) - 1
marginalX <- numeric(length = Rx)
for(i in 1:Rx){
marginalX[i] <- integral2(Moffat2DPDF, xmin = xRange[i], xmax = xRange[i+1], ymin = 4040, ymax = 4060, parameters = optimPOI2Par)[[1]]
}
sum(marginalX) #checking it sums to 1 - expect it to be a little less as it isn't summed over infinite (x,y) plain
marginalY <- numeric(length = Ry)
for(i in 1:Ry){
marginalY[i] <- integral2(Moffat2DPDF, xmin = 4105, xmax = 4125, ymin = yRange[i], ymax = yRange[i+1], parameters = optimPOI2Par)[[1]]
}
sum(marginalY) #checking it sums to 1
xMids <- numeric(length = Rx)
for(i in 1:Rx){
xMids[i] <- (xRange[i]+xRange[i+1])/2
}
yMids <- numeric(length = Ry)
for(i in 1:Ry){
yMids[i] <- (yRange[i]+yRange[i+1])/2
}
dataframeMarginalX <- data.frame(x = xMids, y = marginalX)
dataframeMarginalY <- data.frame(x = yMids, y = marginalY)
plot(dataframeMarginalX, type = "l")
plot(dataframeMarginalY, type = "l")
margX <- ggplot(dataframeMarginalX) +
geom_line(aes(x = xMids, y = marginalX), col = cbPalette[2]) +
labs(x = "x", y = "Density", main = "Marginal PDF of x")
margY <- ggplot(dataframeMarginalY) +
geom_line(aes(x = yMids, y = marginalY), col = cbPalette[2]) +
labs(x = "y", y = "Density", main = "Marginal PDF of y") +
rotate()
histX <- ggplot(POI2, aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 100, col = cbPalette[3], fill = cbPalette[5])
histY <- ggplot(POI2, aes(x = y)) +
geom_histogram(aes(y = after_stat(density)), bins = 100, col = cbPalette[3], fill = cbPalette[5]) +
rotate()
margX
margY
histX
histY
xRange <- seq(4105, 4125, length = 200)
yRange <- seq(4040, 4060, length = 200)
xMarg <- numeric(length = 200)
for(i in 1:200){
xMarg[i] <- Moffat2DPDF(optimPOI2Par, xRange[i], optimPOI2Par[2])
}
xMargdf <- data.frame(xRange, xMarg)
histogramWithMarginalX <- ggplot(POI2, aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 250, col = cbPalette[3], fill = cbPalette[5]) +
geom_line(data = xMargdf, aes(x = xRange, y = xMarg), col = cbPalette[2]) +
labs(x = NULL, y = "Density") +
theme(axis.text.x = element_blank(), axis.title.x = element_blank())
histogramWithMarginalX
yMarg <- numeric(length = 200)
for(i in 1:200){
yMarg[i] <- Moffat2DPDF(optimPOI2Par, optimPOI2Par[1], yRange[i])
}
yMargdf <- data.frame(yRange, yMarg)
histogramWithMarginalY <- ggplot(POI2, aes(x = y)) +
geom_histogram(aes(y = after_stat(density)), bins = 250, col = cbPalette[3], fill = cbPalette[5]) +
geom_line(data = yMargdf, aes(x = yRange, y = yMarg), col = cbPalette[2]) +
labs(x = NULL , y = "Density") +
theme(axis.text.y = element_blank(), axis.title.y = element_blank()) +
rotate()
histogramWithMarginalY
plot_grid(histogramWithMarginalX, NULL, combined, histogramWithMarginalY, ncol = 2, align = "hv", rel_widths = c(2, 1), rel_heights = c(1, 2), axis = c("l", "b"))
xRange <- seq(4110, 4120, length = 100)
yRange <- seq(4045, 4055, length = 100)
data <- expand.grid(x = xRange, y = yRange)
model <- ggplot(POI2, aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000)) +
theme(legend.position = "none")
contours <- ggplot(data, aes(x = x, y = y)) +
stat_contour(aes(z = zPOI2), bins = 10)
ggMarginal(model, type = "histogram")
contours
contourData <- ggplot_build(contours)$data[[1]]
combined <- model + geom_path(data = contourData, aes(x = x, y = y, group = group), color = "red", alpha = 0.5)
combined
xRange <- seq(4105, 4125, length = 200)
yRange <- seq(4040, 4060, length = 200)
xMarg <- numeric(length = 200)
for(i in 1:200){
xMarg[i] <- Moffat2DPDF(optimPOI2Par, xRange[i], optimPOI2Par[2])
}
xMargdf <- data.frame(xRange, xMarg)
histogramWithMarginalX <- ggplot(POI2, aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 250, col = cbPalette[3], fill = cbPalette[5]) +
geom_line(data = xMargdf, aes(x = xRange, y = xMarg), col = cbPalette[2]) +
labs(x = NULL, y = "Density") +
theme(axis.text.x = element_blank(), axis.title.x = element_blank())
histogramWithMarginalX
yMarg <- numeric(length = 200)
for(i in 1:200){
yMarg[i] <- Moffat2DPDF(optimPOI2Par, optimPOI2Par[1], yRange[i])
}
yMargdf <- data.frame(yRange, yMarg)
histogramWithMarginalY <- ggplot(POI2, aes(x = y)) +
geom_histogram(aes(y = after_stat(density)), bins = 250, col = cbPalette[3], fill = cbPalette[5]) +
geom_line(data = yMargdf, aes(x = yRange, y = yMarg), col = cbPalette[2]) +
labs(x = NULL , y = "Density") +
theme(axis.text.y = element_blank(), axis.title.y = element_blank()) +
rotate()
histogramWithMarginalY
plot_grid(histogramWithMarginalX, NULL, combined, histogramWithMarginalY, ncol = 2, align = "hv", rel_widths = c(2, 1), rel_heights = c(1, 2), axis = c("l", "b"))
knitr::opts_chunk$set(echo = TRUE)
library(here)
i_am("MultivariateMixtureModels.Rmd")
# laptop data from csv
Terzan5 <- readr::read_csv(here("Data", "Terzan 5 X-ray events.csv"), col_types = list(.default = readr::col_guess()), )
# head(Terzan5)
#fishbowl data from ODS
# library(readODS)
# Terzan5 <- read_ods(here("Raw Data.ods"), col_types = list(.default = readr::col_guess()), )
#removing extraneous columns
T5 <- data.frame(Terzan5$x, Terzan5$y)
colnames(T5) <- c('x','y')
library(ggplot2)
library(ggpointdensity)
library(viridis)
ggplot(T5,aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(10, 100, 1000, 10000)) +
coord_fixed()
library(tidyr)
library(plotly)
interestArea <- T5 %>%
filter(x>4100 & x<4150 & y>4025 & y<4075)
ggplot(interestArea,aes(x,y)) +
geom_pointdensity(adjust = 0.05, size = 0.1, shape = "1") +
scale_color_viridis(direction = -1, option = "B", trans = "log", breaks = c(4, 16, 64)) +
coord_fixed()
ggplot(interestArea,aes(x,y)) +
geom_point(size = 0.5)
library(mixtools)
install.packages("mixtools")
library(mixtools)
set.seed(111)
data1 <- cbind(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 0, sd = 1))
data2 <- cbind(rnorm(100, mean = 5, sd = 1), rnorm(100, mean = 5, sd = 1))
datafull <- rbind(data1, data2)
plot(data1)
plot(data2)
plot(datafull)
fit <- mvnormalmixEM(datafull, k = 2)
names(fit)
fit$lambda
fit$mu
fit$sigma
fit$loglik
#fit$posterior
fit$all.loglik
fit$restarts
plot.mixEM(fit, whichplots = 2)
plot.mixEM(fit, whichplots = 1)
library(mixtools)
set.seed(111)
data1 <- cbind(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 0, sd = 1))
data2 <- cbind(rnorm(100, mean = 5, sd = 1), rnorm(100, mean = 5, sd = 1))
datafull <- rbind(data1, data2)
plot(data1)
plot(data2)
plot(datafull)
fit <- mvnormalmixEM(datafull, k = 2)
names(fit)
fit$lambda
fit$mu
fit$sigma
fit$loglik
#fit$posterior
fit$all.loglik
fit$restarts
plot.mixEM(fit, whichplots = 2)
plot.mixEM(fit, whichplots = 1)
trial <- mvnormalmixEM(interestArea, k = 3)
library(mixAK)
install.packages("mixAK")
library(mixAK)
NMixEM(datafull, K = 2)
library(mixAK)
NMixEM(datafull, K = 2)
install.packages("goftest")
library(goftest)
ad.test(x = sortNTL2, null = VMCDF)
pAD(x = sortNTL2)
pAD(q = sortNTL2)
curve(pAD(q = sortNTL2))
curve(pAD(sortNTL2))
curve(pAD(sortNTL2), from = 4105, to = 4125)
library(goftest)
ad.test(x = sortNTL2, null = "norm")
library(goftest)
ad.test(x = sortNTL2, null = "norm")
